{"version":3,"sources":["index.js","App.js","Home.js","Country.js","api.js","serviceWorker.js","state.js","Chart.js"],"names":["ReactDOM","render","document","getElementById","serviceWorker","unregister","colors","length","color","Math","floor","random","indexOf","push","toString","slice","numberWithCommas","x","replace","App","d","time","console","log","countries","top10","sort","a","b","confirmed","labels","map","i","country","data","chartData","datasets","label","backgroundColor","borderColor","borderWidth","lineChartData","format","aTotal","bTotal","locations","forEach","l","total","countryTimeData","index","sets","dates","Object","keys","location","y","Date","day","getDate","month","getMonth","fill","state","setState","lastUpdated","date","allCases","allDeaths","deaths","allRecovered","recovered","filteredCountries","ScrollView","contentContainerStyle","styles","container","View","style","Text","accessibilityRole","target","href","title","padding","width","Link","to","lineHeight","Switch","Route","path","Redirect","ActivityIndicator","size","marginTop","alignSelf","Component","StyleSheet","create","alignItems","minHeight","box","margin","fontWeight","fontSize","text","marginBottom","borderBottomColor","borderBottomStyle","borderBottomWidth","Value","subscribe","Box","children","L","t","V","value","updateSearch","search","filter","toLowerCase","includes","key","toDateString","flexDirection","justifyContent","LineChart","legend","TextInput","height","borderRadius","paddingLeft","paddingRight","placeholder","onChangeText","useParams","useState","barData","setBarData","timeData","setTimeData","setCountryData","useEffect","find","countryData","BarChart","fetch","method","body","j","json","config","navigator","URL","process","window","origin","addEventListener","swUrl","isLocalhost","headers","then","response","contentType","get","status","ready","registration","reload","registerValidSW","catch","checkValidServiceWorker","error","message","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","State","position","Line","options","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","callback","values","display","fontColor","boxWidth","hoverBackgroundColor","Bar","PieChart","Pie","props"],"mappings":"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","file":"static/js/main.aeb05b4e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  ScrollView,\n} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom';\n\nimport {subscribe} from 'jstates-react';\nimport Home from './Home';\n// import {colors} from './Chart';\nimport Country from './Country';\nimport getData from './api';\nimport state from './state';\n\nconst colors = [];\nwhile (colors.length < 100) {\n  let color;\n  do {\n    color = Math.floor(Math.random() * 100000000 + 1);\n  } while (colors.indexOf(color) >= 0);\n  colors.push('#' + ('000000' + color.toString(16)).slice(-6));\n}\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nclass App extends Component {\n  async componentDidMount() {\n    const {d, time} = await getData();\n    console.log('--¯_(ツ)_/¯-----------d----------', d);\n    console.log('--¯_(ツ)_/¯-----------time----------', time);\n\n    const countries = d.countries;\n\n    const top10 = countries\n      .sort((a, b) => b.confirmed - a.confirmed)\n      .slice(0, 6);\n\n    const labels = top10.map((i) => i.country);\n    const data = top10.map((i) => i.confirmed);\n    const chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Cases per country',\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data,\n        },\n      ],\n    };\n    const lineChartData = {\n      labels: [],\n      datasets: [],\n    };\n    const format = (i) => (i < 10 ? `0${i}` : i);\n    const timeCountries = time.countries\n      .sort((a, b) => {\n        let aTotal = 0;\n        let bTotal = 0;\n        a.locations.forEach((l) => {\n          aTotal += l.total;\n        });\n        b.locations.forEach((l) => {\n          bTotal += l.total;\n        });\n\n        return bTotal - aTotal;\n      })\n      .slice(0, 10);\n\n    timeCountries.forEach((countryTimeData, index) => {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      if (lineChartData.labels.length < 1) {\n        lineChartData.labels = sets.map((i) => {\n          const d = new Date(i.y);\n          const day = d.getDate();\n          const month = d.getMonth() + 1;\n\n          return `${format(day)}.${format(month)}`;\n        });\n      }\n      lineChartData.datasets.push({\n        label: countryTimeData.country,\n        borderColor: colors[index],\n        fill: false,\n        borderWidth: 1,\n        data: sets.map((i) => i.x),\n      });\n    });\n\n    state.setState({\n      lastUpdated: new Date(d.date),\n      allCases: numberWithCommas(d.confirmed),\n      allDeaths: numberWithCommas(d.deaths),\n      allRecovered: numberWithCommas(d.recovered),\n      countries,\n      filteredCountries: countries,\n      chartData,\n      time,\n      lineChartData,\n    });\n  }\n\n  render() {\n    const {lastUpdated} = state.state;\n\n    return (\n      <Router>\n        <ScrollView contentContainerStyle={styles.container}>\n          <View style={styles.container}>\n            <Text\n              accessibilityRole=\"link\"\n              target=\"_blank\"\n              href=\"https://github.com/CSSEGISandData/COVID-19\"\n              style={[\n                styles.title,\n                {color: '#aaa', padding: 10, width: '100%'},\n              ]}>\n              COVID-19 data provided by Johns Hopkins CSSE\n            </Text>\n            {!lastUpdated ? (\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            ) : (\n              <>\n                <Link to=\"/\">\n                  <Text\n                    style={[\n                      styles.title,\n                      {\n                        color: '#fff',\n                        padding: 10,\n                        width: '100%',\n                        backgroundColor: '#00429d',\n                        lineHeight: 35,\n                      },\n                    ]}>\n                    Go Back Home\n                  </Text>\n                </Link>\n\n                <Switch>\n                  <Route path=\"/country/:country\">\n                    <Country />\n                  </Route>\n                  <Route path=\"/\">\n                    <Home />\n                  </Route>\n                  <Redirect to=\"/\" />\n                </Switch>\n              </>\n            )}\n          </View>\n        </ScrollView>\n      </Router>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  box: {\n    margin: 10,\n    padding: 10,\n    width: '80%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: '#ddd',\n  },\n  Value: {\n    color: '#fff',\n  },\n});\n\nexport default subscribe(App, [state]);\n","import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TextInput,\n} from 'react-native';\nimport {Link} from 'react-router-dom';\nimport Chart, {LineChart} from './Chart';\nimport state from './state';\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nconst Box = ({children, style}) => (\n  <View style={[styles.box, style]}>{children}</View>\n);\n\nconst L = ({t}) => <Text style={styles.label}>{t}</Text>;\nconst V = ({t}) => <Text style={styles.value}>{t}</Text>;\n\nconst updateSearch = (search = '') => {\n  state.setState({search});\n  if (search.length) {\n    const filteredCountries = state.state.countries.filter((i) =>\n      i.country.toLowerCase().includes(search.toLowerCase()),\n    );\n    state.setState({filteredCountries});\n  }\n};\nconst Home = () => {\n  const {\n    lastUpdated,\n    lineChartData,\n    allCases,\n    allDeaths,\n    allRecovered,\n    filteredCountries,\n    search,\n    chartData,\n  } = state.state;\n\n  return (\n    <View style={styles.container}>\n      {!lastUpdated ? (\n        <ActivityIndicator\n          size=\"large\"\n          style={{\n            marginTop: 40,\n            alignSelf: 'center',\n          }}\n        />\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>Worldwide</Text>\n            <Text key={`Total cases: ${allCases}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={allCases} />\n            </Text>\n            <Text key={`Total deaths: ${allDeaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={allDeaths} />\n            </Text>\n            <Text key={`Total recovered: ${allRecovered}`} style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={allRecovered} />\n            </Text>\n            <Text\n              key={`updated on: ${lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          <View\n            style={{\n              width: '80%',\n              marginBottom: 20,\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}>\n            <Chart data={chartData} />\n            <LineChart data={lineChartData} legend />\n          </View>\n          <TextInput\n            style={{\n              height: 40,\n              borderColor: 'gray',\n              borderWidth: 1,\n              backgroundColor: '#ccc',\n              width: '80%',\n              borderRadius: 3,\n              paddingLeft: 8,\n              paddingRight: 8,\n            }}\n            placeholder=\"Type Country Name Here...\"\n            onChangeText={updateSearch}\n            value={search || ''}\n          />\n          <Box>\n            {filteredCountries.length < 1 ? (\n              <Text style={[styles.title, styles.text]}>\n                No counteries were found.. try another search term\n              </Text>\n            ) : (\n              filteredCountries.map(\n                ({country, confirmed, deaths, recovered}, index) => (\n                  <Link to={`/country/${country}`} key={index}>\n                    <View style={styles.country}>\n                      <Text style={[styles.title, styles.text]}>{country}</Text>\n                      <Text style={styles.text}>\n                        <L t=\"Cases:\" /> <V t={numberWithCommas(confirmed)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Deaths: \" />\n                        <V t={numberWithCommas(deaths)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Recovered: \" />\n                        <V t={numberWithCommas(recovered)} />\n                      </Text>\n                    </View>\n                  </Link>\n                ),\n              )\n            )}\n          </Box>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  box: {\n    margin: 10,\n    padding: 10,\n    width: '80%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: '#ddd',\n  },\n  Value: {\n    color: '#fff',\n  },\n});\n\nexport default Home;\n","import React, {useEffect, useState} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams} from 'react-router-dom';\nimport {LineChart, BarChart} from './Chart';\nimport state from './state';\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nconst Box = ({children, style}) => (\n  <View style={[styles.box, style]}>{children}</View>\n);\n\nconst L = ({t}) => <Text style={styles.label}>{t}</Text>;\nconst V = ({t}) => <Text style={styles.value}>{t}</Text>;\n\nconst Country = () => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n\n  useEffect(() => {\n    const {countries, time} = state.state;\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const format = (i) => (i < 10 ? `0${i}` : i);\n      const lineChartData = {\n        labels: sets.map((i) => {\n          const d = new Date(i.y);\n          const day = d.getDate();\n          const month = d.getMonth() + 1;\n\n          return `${format(day)}.${format(month)}`;\n        }),\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n    }\n  }, [country]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            <Text\n              key={`updated on: ${state.state.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={state.state.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          {!!timeData && (\n            <View style={{width: '80%', marginBottom: 20}}>\n              <LineChart data={timeData} />\n              <BarChart\n                data={barData}\n                colors={['#ff2222', '#00ff00', '#ccc']}\n              />\n            </View>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  box: {\n    margin: 10,\n    padding: 10,\n    width: '80%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: '#ddd',\n  },\n  Value: {\n    color: '#fff',\n  },\n});\n\nexport default Country;\n","const API =\n  process.env.NODE_ENV === 'production'\n    ? '/api/data'\n    : 'http://localhost:5000/api/data';\n\nconst getData = async () => {\n  const j = await fetch(API, {\n    method: 'post',\n    body: {},\n  });\n  const d = j.json();\n  return d;\n};\n\nexport default getData;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {State} from 'jstates-react';\n\nconst state = new State('state', {\n  lastUpdated: null,\n  search: '',\n});\n\nexport default state;\n","import React from 'react';\nimport {Pie, Bar, Line} from 'react-chartjs-2';\nimport {View} from 'react-native';\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nexport const LineChart = ({data, legend}) => {\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true,\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: false,\n            fontSize: 20,\n          },\n          legend: {\n            display: !!legend,\n            position: 'bottom',\n            labels: {\n              fontColor: 'white',\n              boxWidth: 20,\n              padding: 20,\n            },\n          },\n        }}\n      />\n    </View>\n  );\n};\nexport const BarChart = ({data, colors}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors || [\n    '#501800',\n    '#4B5000',\n    '#175000',\n    '#003350',\n    '#35014F',\n  ];\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: false,\n            // text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n};\nexport const colors = [\n  '#000294',\n  '#00429d',\n  '#2e59a8',\n  '#4771b2',\n  '#5d8abd',\n  '#73a2c6',\n  '#8abccf',\n  '#a5d5d8',\n  '#c5eddf',\n  '#ffffe0',\n];\n// const colors = [];\n// while (colors.length < 100) {\n//   let color;\n//   do {\n//     color = Math.floor(Math.random() * 100000000 + 1);\n//   } while (colors.indexOf(color) >= 0);\n//   colors.push('#' + ('000000' + color.toString(16)).slice(-6));\n// }\nconst PieChart = ({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = [\n    '#501800',\n    '#4B5000',\n    '#175000',\n    '#003350',\n    '#35014F',\n  ];\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/* \n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n};\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      <PieChart {...props} />\n    </>\n  );\n};\nexport default Chart;\n"],"sourceRoot":""}