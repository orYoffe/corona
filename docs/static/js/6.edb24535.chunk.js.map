{"version":3,"sources":["Country.js","Chart.js"],"names":["redColors","Array","fill","styles","StyleSheet","create","container","alignItems","minHeight","width","backgroundColor","title","color","fontWeight","fontSize","text","marginBottom","country","borderBottomColor","borderBottomStyle","borderBottomWidth","button","borderRadius","padding","marginVertical","marginTop","buttonText","subscribe","memo","props","useParams","useState","barData","setBarData","dailyInfections","setDailyInfections","timeData","setTimeData","data","setCountryData","countries","time","useEffect","countryTimeData","find","i","countryData","confirmed","recovered","deaths","labels","datasets","label","borderColor","borderWidth","sets","locations","dates","map","index","total","Object","keys","forEach","location","y","x","d","Date","replace","day","getDate","month","getMonth","format","lineChartData","daily","parseInt","dailyInfectionsData","slice","ActivityIndicator","size","style","alignSelf","View","Link","to","Text","lineHeight","Box","key","L","t","V","numberWithCommas","active","population","precentage","lastUpdated","toDateString","LineChart","BarChart","colors","state","logarithmicConfig","type","ticks","min","max","callback","value","values","Number","toString","afterBuildTicks","chartObj","push","legend","logarithmic","options","display","responsive","maintainAspectRatio","scales","yAxes","beginAtZero","position","fontColor","boxWidth","height","Line","c","hoverBackgroundColor","Bar","PieChart","Pie"],"mappings":"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","file":"static/js/6.edb24535.chunk.js","sourcesContent":["import React, {useEffect, useState, memo} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams, Link} from 'react-router-dom';\nimport {subscribe} from 'jstates-react';\nimport {LineChart, BarChart} from './Chart';\nimport {format, numberWithCommas, Box, L, V} from './utils';\nimport state from './state';\n\nconst redColors = new Array(1000).fill('#f00c32');\n\nconst Country = (props) => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [dailyInfections, setDailyInfections] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n  const {countries, time} = props;\n\n  useEffect(() => {\n    if (!countries || !time) {\n      return;\n    }\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n      const lineChartData = {\n        labels,\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderWidth: 2,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n      const daily = sets.map(\n        (i, index) =>\n          parseInt(i.x) - parseInt((sets[index - 1] && sets[index - 1].x) || 0),\n      );\n      const dailyInfectionsData = {\n        labels: labels.slice(1),\n        datasets: [\n          {\n            label: 'Daily Cases',\n            backgroundColor: '#d45757',\n            borderWidth: 2,\n            data: daily.slice(1),\n          },\n        ],\n      };\n      setDailyInfections(dailyInfectionsData);\n    }\n  }, [country, time, countries]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Link to=\"/\">\n        <Text\n          style={[\n            styles.button,\n            styles.buttonText,\n            {\n              padding: 10,\n              width: '100%',\n              lineHeight: 35,\n            },\n          ]}>\n          Go to main page\n        </Text>\n      </Link>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total active: ${data.active}`} style={styles.text}>\n              <L t=\"Total active: \" />\n              <V t={numberWithCommas(data.active)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            {!!data.population && (\n              <Text key={`population: ${data.population}`} style={styles.text}>\n                <L t=\"Population: \" />\n                <V t={numberWithCommas(data.population)} />\n              </Text>\n            )}\n            {!!data.precentage && (\n              <Text key={`population: ${data.precentage}`} style={styles.text}>\n                <L t=\"Population infected: \" />\n                <V t={data.precentage + '%'} />\n              </Text>\n            )}\n            <Text\n              key={`updated on: ${props.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={props.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n\n          <View style={{width: '80%', marginBottom: 20}}>\n            {!!timeData && <LineChart data={timeData} title />}\n            {dailyInfections && (\n              <BarChart data={dailyInfections} colors={redColors} title />\n            )}\n            {barData && (\n              <BarChart\n                data={barData}\n                colors={['#ff2222', '#00ff00', '#ccc']}\n              />\n            )}\n          </View>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n    backgroundColor: '#222222',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  button: {\n    borderRadius: 3,\n    padding: 20,\n    marginVertical: 10,\n    marginTop: 10,\n    backgroundColor: '#1B95E0',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default subscribe(memo(Country), state, (state) => ({\n  lastUpdated: state.lastUpdated,\n  time: state.time,\n  countries: state.countries,\n}));\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\nimport {numberWithCommas, colors} from './utils';\n\nconst logarithmicConfig = {\n  type: 'logarithmic',\n  ticks: {\n    min: 0.1, //minimum tick\n    max: 1000, //maximum tick\n    callback: function (value, index, values) {\n      return Number(value.toString()); //pass tick values as a string into Number function\n    },\n  },\n  afterBuildTicks: function (chartObj) {\n    //Build ticks labelling as per your need\n    chartObj.ticks = [];\n    chartObj.ticks.push(0.1);\n    chartObj.ticks.push(1);\n    chartObj.ticks.push(10);\n    chartObj.ticks.push(100);\n    chartObj.ticks.push(1000);\n  },\n};\nexport const LineChart = memo(({data, legend, title, logarithmic}) => {\n  const options = {\n    title: {\n      display: logarithmic || !!title,\n      text: logarithmic ? 'Logarithmic chart' : data.datasets[0].label,\n      fontSize: 20,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return numberWithCommas(value, true);\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: !!legend,\n      position: 'bottom',\n      labels: {\n        fontColor: 'white',\n        boxWidth: 20,\n        padding: 20,\n      },\n    },\n  };\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line\n        data={data}\n        options={logarithmic ? {...logarithmicConfig, ...options} : options}\n      />\n    </View>\n  );\n});\nexport const BarChart = memo(({data, colors: c, title}) => {\n  data.datasets[0].backgroundColor = c || colors;\n  data.datasets[0].hoverBackgroundColor = c || colors;\n  return (\n    <View\n      style={{\n        marginTop: 20,\n        height: '40vh',\n        width: '100%',\n        position: 'relative',\n      }}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value, true);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: !!title,\n            text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n});\n\nexport const PieChart = memo(({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors;\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/*\n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n});\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      {/* <PieChart {...props} /> */}\n    </>\n  );\n};\nexport default Chart;\n"],"sourceRoot":""}