{"version":3,"sources":["Country.js","Chart.js"],"names":["RED","redColors","Array","fill","styles","StyleSheet","create","container","alignItems","minHeight","width","backgroundColor","title","color","fontWeight","fontSize","text","marginBottom","country","borderBottomColor","borderBottomStyle","borderBottomWidth","button","borderRadius","padding","marginVertical","marginTop","buttonText","subscribe","memo","props","useParams","useState","barData","setBarData","dailyInfections","setDailyInfections","timeData","setTimeData","data","setCountryData","countries","time","deaths","recovered","useEffect","countryDeathTimeData","find","i","countryRecoveredTimeData","countryTimeData","countryData","confirmed","labels","datasets","label","borderColor","borderWidth","sets","locations","dates","map","index","total","Object","keys","forEach","location","y","x","setsDeath","setsRecovered","d","Date","replace","day","getDate","month","getMonth","format","lineChartData","daily","parseInt","dailyInfectionsData","slice","ActivityIndicator","size","style","alignSelf","View","Link","to","Text","lineHeight","Box","key","L","t","V","numberWithCommas","active","population","precentage","lastUpdated","toDateString","LineChart","BarChart","colors","state","legend","options","display","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","callback","value","values","position","fontColor","boxWidth","height","Line","c","hoverBackgroundColor","Bar","PieChart","Pie"],"mappings":"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","file":"static/js/6.feb2df60.chunk.js","sourcesContent":["import React, {useEffect, useState, memo} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams, Link} from 'react-router-dom';\nimport {subscribe} from 'jstates-react';\nimport {LineChart, BarChart} from './Chart';\nimport {format, numberWithCommas, Box, L, V} from './utils';\nimport state from './state';\n\nconst RED = '#f00c32';\nconst GREEN = '#08cf47';\nconst GREY = '#555';\nconst redColors = new Array(1000).fill(RED);\n\nconst Country = (props) => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [dailyInfections, setDailyInfections] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n  const {countries, time, deaths, recovered} = props;\n\n  useEffect(() => {\n    if (!countries || !time || !deaths || !recovered) {\n      return;\n    }\n    const countryDeathTimeData = deaths.countries.find(\n      (i) => i.country === country,\n    );\n    const countryRecoveredTimeData = recovered.countries.find(\n      (i) => i.country === country,\n    );\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            // backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const setsDeath = countryDeathTimeData.locations[0].dates.map(\n        (i, index) => {\n          let total = 0;\n          const time = Object.keys(i)[0];\n          countryDeathTimeData.locations.forEach((location) => {\n            total += location.dates[index][time];\n          });\n          return total;\n        },\n      );\n      const setsRecovered = countryRecoveredTimeData.locations[0].dates.map(\n        (i, index) => {\n          let total = 0;\n          const time = Object.keys(i)[0];\n          countryRecoveredTimeData.locations.forEach((location) => {\n            total += location.dates[index][time];\n          });\n          return total;\n        },\n      );\n      const labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n      const lineChartData = {\n        labels,\n        datasets: [\n          {\n            label: 'Deaths',\n            backgroundColor: GREY,\n            // borderColor: GREY,\n            // fillColor: GREY,\n            // pointColor: GREY,\n            // pointStrokeColor: '#fff',\n            // pointHighlightFill: '#fff',\n            borderWidth: 1,\n            data: setsDeath,\n          },\n          {\n            label: 'Recovered',\n            backgroundColor: GREEN,\n            // borderColor: GREEN,\n            // fillColor: GREEN,\n            // pointColor: GREEN,\n            // pointStrokeColor: '#fff',\n            // pointHighlightFill: '#fff',\n            borderWidth: 1,\n            data: setsRecovered,\n          },\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: RED,\n            // borderColor: RED,\n            // fillColor: RED,\n            // pointColor: RED,\n            // pointStrokeColor: '#fff',\n            // pointHighlightFill: '#fff',\n            // fill: false,\n            borderWidth: 1,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n      const daily = sets.map(\n        (i, index) =>\n          parseInt(i.x) - parseInt((sets[index - 1] && sets[index - 1].x) || 0),\n      );\n      const dailyInfectionsData = {\n        labels: labels.slice(1),\n        datasets: [\n          {\n            label: 'Daily Cases',\n            backgroundColor: '#d45757',\n            borderWidth: 2,\n            data: daily.slice(1),\n          },\n        ],\n      };\n      setDailyInfections(dailyInfectionsData);\n    }\n  }, [country, time, countries, deaths, recovered]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Link to=\"/\">\n        <Text\n          style={[\n            styles.button,\n            styles.buttonText,\n            {\n              padding: 10,\n              width: '100%',\n              lineHeight: 35,\n            },\n          ]}>\n          Go to main page\n        </Text>\n      </Link>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total active: ${data.active}`} style={styles.text}>\n              <L t=\"Total active: \" />\n              <V t={numberWithCommas(data.active)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            {!!data.population && (\n              <Text key={`population: ${data.population}`} style={styles.text}>\n                <L t=\"Population: \" />\n                <V t={numberWithCommas(data.population)} />\n              </Text>\n            )}\n            {!!data.precentage && (\n              <Text key={`population: ${data.precentage}`} style={styles.text}>\n                <L t=\"Population infected: \" />\n                <V t={data.precentage + '%'} />\n              </Text>\n            )}\n            <Text\n              key={`updated on: ${props.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={props.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n\n          <View style={{width: '80%', marginBottom: 20}}>\n            {!!timeData && <LineChart data={timeData} />}\n            {!!dailyInfections && (\n              <BarChart data={dailyInfections} colors={redColors} title />\n            )}\n            {!!barData && (\n              <BarChart data={barData} colors={[RED, GREEN, GREY]} />\n            )}\n          </View>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n    backgroundColor: '#222222',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  button: {\n    borderRadius: 3,\n    padding: 20,\n    marginVertical: 10,\n    marginTop: 10,\n    backgroundColor: '#1B95E0',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default subscribe(memo(Country), state, (state) => ({\n  lastUpdated: state.lastUpdated,\n  time: state.time,\n  countries: state.countries,\n  deaths: state.deaths,\n  recovered: state.recovered,\n}));\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\nimport {numberWithCommas, colors} from './utils';\n\nexport const LineChart = memo(({data, legend, title}) => {\n  const options = {\n    title: {\n      display: !!title,\n      text: data.datasets[0].label,\n      fontSize: 20,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return numberWithCommas(value, true);\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: !!legend,\n      position: 'bottom',\n      labels: {\n        fontColor: 'white',\n        boxWidth: 20,\n        padding: 20,\n      },\n    },\n  };\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line data={data} options={options} />\n    </View>\n  );\n});\nexport const BarChart = memo(({data, colors: c, title}) => {\n  data.datasets[0].backgroundColor = c || colors;\n  data.datasets[0].hoverBackgroundColor = c || colors;\n  return (\n    <View\n      style={{\n        marginTop: 20,\n        height: '40vh',\n        width: '100%',\n        position: 'relative',\n      }}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true,\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value, true);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: !!title,\n            text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n});\n\nexport const PieChart = memo(({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors;\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/*\n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n});\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      {/* <PieChart {...props} /> */}\n    </>\n  );\n};\nexport default Chart;\n"],"sourceRoot":""}