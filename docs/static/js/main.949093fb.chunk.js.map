{"version":3,"sources":["Chart.js","state.js","index.js","App.js","Country.js","Home.js","jsu.js","serviceWorker.js"],"names":["i","colors","logarithmicConfig","type","ticks","min","max","callback","value","index","values","Number","toString","afterBuildTicks","chartObj","push","children","style","View","margin","padding","width","t","Text","color","numberWithCommas","x","shouldRound","s","replace","decimal","length","slice","data","legend","title","logarithmic","options","display","text","datasets","label","fontSize","responsive","maintainAspectRatio","scales","yAxes","beginAtZero","position","labels","fontColor","boxWidth","marginTop","height","Line","BarChart","c","backgroundColor","hoverBackgroundColor","Bar","Pie","props","State","lastUpdated","search","ReactDOM","render","document","getElementById","serviceWorker","register","covid19","require","App","Promise","all","getData","getTimeSeriesData","fetch","then","j","json","d","time","console","log","countryNamesExceptions","US","Iran","Russia","Czechia","Egypt","Slovakia","Kyrgyzstan","Venezuela","Brunei","Gambia","countries","map","country","countryPopulations","records","filter","countryName","fields","country_name","toLowerCase","countryPopulation","sort","a","b","year","newCountry","population","perc","confirmed","toFixed","precentage","top10","chartData","borderColor","borderWidth","lineChartData","aTotal","bTotal","locations","forEach","l","total","countryTimeData","sets","dates","Object","keys","location","y","Date","day","getDate","month","getMonth","format","fill","state","setState","date","allCases","allDeaths","deaths","allRecovered","recovered","filteredCountries","basename","ScrollView","contentContainerStyle","styles","container","accessibilityRole","target","href","Link","to","lineHeight","Switch","Route","path","Redirect","ActivityIndicator","size","alignSelf","Component","StyleSheet","create","alignItems","minHeight","fontWeight","subscribe","marginBottom","borderBottomColor","borderBottomStyle","borderBottomWidth","useParams","useState","barData","setBarData","dailyInfections","setDailyInfections","timeData","setTimeData","setCountryData","useEffect","find","countryData","daily","parseInt","dailyInfectionsData","Box","key","L","V","toDateString","LineChart","updateSearch","includes","flexDirection","justifyContent","TextInput","borderRadius","paddingLeft","paddingRight","placeholder","onChangeText","moment","request","csv","Covid19","undefined","this","fetchData","addRemoteTimesSeries","addRemoteDailyReports","subtract","error","fromStream","get","resolve","reject","obj","lat","lon","lastUpdate","groupBy","array","totalConfirmed","totalRecovered","totalDeaths","allConfirmed","result","added","entry","m","diff","add","dateObj","lastDate","groupByTimesSeries","grandTotal","root","module","exports","config","navigator","URL","process","window","origin","addEventListener","swUrl","isLocalhost","headers","response","contentType","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","message","Boolean","hostname","match","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.949093fb.chunk.js","sourcesContent":["import React from 'react';\nimport {Text, View} from 'react-native';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\n\nexport const format = (i) => (i < 10 ? `0${i}` : i);\nexport const colors = [\n  '#ff0029',\n  '#377eb8',\n  '#7f80cd',\n  '#66a61e',\n  '#984ea3',\n  '#00d2d5',\n  '#ff7f00',\n  '#af8d00',\n  '#b3e900',\n  '#fec254',\n  '#ccebc5',\n  '#a63603',\n  '#016c59',\n  '#e7298a',\n  '#c994c7',\n  '#dfdf00',\n  '#df00df',\n  '#80ff80',\n];\nconst logarithmicConfig = {\n  type: 'logarithmic',\n  ticks: {\n    min: 0.1, //minimum tick\n    max: 1000, //maximum tick\n    callback: function (value, index, values) {\n      return Number(value.toString()); //pass tick values as a string into Number function\n    },\n  },\n  afterBuildTicks: function (chartObj) {\n    //Build ticks labelling as per your need\n    chartObj.ticks = [];\n    chartObj.ticks.push(0.1);\n    chartObj.ticks.push(1);\n    chartObj.ticks.push(10);\n    chartObj.ticks.push(100);\n    chartObj.ticks.push(1000);\n  },\n};\n\nexport const Box = ({children, style}) => (\n  <View\n    style={[\n      {\n        margin: 10,\n        padding: 10,\n        width: '80%',\n      },\n      style,\n    ]}>\n    {children}\n  </View>\n);\n\nexport const L = ({t}) => (\n  <Text\n    style={{\n      color: '#ddd',\n    }}>\n    {t}\n  </Text>\n);\nexport const V = ({t}) => (\n  <Text\n    style={{\n      color: '#fff',\n    }}>\n    {t}\n  </Text>\n);\n\nexport function numberWithCommas(x, shouldRound) {\n  const s = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  if (shouldRound && x > 999) {\n    let decimal = '';\n    if (x < 2000 && s.length > 4 && s.slice(-3) !== '000') {\n      decimal = `.${s.slice(-3)[0]}`;\n    }\n\n    return `${s.slice(0, s.length - 4)}${decimal}K`;\n  }\n  return s;\n}\n\nexport const LineChart = ({data, legend, title, logarithmic}) => {\n  const options = {\n    title: {\n      display: logarithmic || !!title,\n      text: logarithmic ? 'Logarithmic chart' : data.datasets[0].label,\n      fontSize: 20,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return numberWithCommas(value, true);\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: !!legend,\n      position: 'bottom',\n      labels: {\n        fontColor: 'white',\n        boxWidth: 20,\n        padding: 20,\n      },\n    },\n  };\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line\n        data={data}\n        options={logarithmic ? {...logarithmicConfig, ...options} : options}\n      />\n    </View>\n  );\n};\nexport const BarChart = ({data, colors: c}) => {\n  data.datasets[0].backgroundColor = c || colors;\n  data.datasets[0].hoverBackgroundColor = c || colors;\n  return (\n    <View\n      style={{\n        marginTop: 20,\n        height: '40vh',\n        width: '100%',\n        position: 'relative',\n      }}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value, true);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: false,\n            // text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n};\n\nexport const PieChart = ({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors;\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/*\n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n};\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      {/* <PieChart {...props} /> */}\n    </>\n  );\n};\nexport default Chart;\n","import {State} from 'jstates-react';\n\nconst state = new State('state', {\n  lastUpdated: null,\n  search: '',\n});\n\nexport default state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  ScrollView,\n} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport {subscribe} from 'jstates-react';\nimport Country from './Country';\nimport Home from './Home';\nimport {colors, format, numberWithCommas} from './Chart';\nimport state from './state';\n\nconst Covid19 = require('./jsu');\nconst covid19 = new Covid19();\n\nclass App extends Component {\n  async componentDidMount() {\n    const [d, time, j] = await Promise.all([\n      covid19.getData(),\n      covid19.getTimeSeriesData('confirmed'),\n      fetch(\n        'https://data.opendatasoft.com/api/records/1.0/search/?dataset=world-population%40kapsarc&rows=10000&sort=year&facet=year&facet=country_name',\n      ).then((j) => j.json()),\n    ]);\n    console.log('--¯_(ツ)_/¯-----------d----------', d);\n    console.log('--¯_(ツ)_/¯-----------time----------', time);\n    console.log('--¯_(ツ)_/¯-----------j----------', j);\n    const countryNamesExceptions = {\n      US: 'United States',\n      Iran: 'Iran, Islamic Rep.',\n      Russia: 'Russian Federation',\n      'Korea, South': 'Korea, Rep.',\n      Czechia: 'Czech Republic',\n      Egypt: 'Egypt, Arab Rep.',\n      Slovakia: 'Slovak Republic',\n      Kyrgyzstan: 'Kyrgyz Republic',\n      Venezuela: 'Venezuela, RB',\n      Brunei: 'Brunei Darussalam',\n      Gambia: 'Gambia, The',\n    };\n    const countries = d.countries.map((country) => {\n      const countryPopulations = j.records.filter((i) => {\n        const countryName = i.fields.country_name;\n        return (\n          countryName.toLowerCase() === country.country.toLowerCase() ||\n          countryName === countryNamesExceptions[country.country]\n        );\n      });\n\n      if (!countryPopulations.length) {\n        return country;\n      }\n      const countryPopulation = countryPopulations.sort(\n        (a, b) => b.fields.year - a.fields.year,\n      )[0];\n      if (!countryPopulation || !countryPopulation.fields.value) {\n        return country;\n      }\n      const newCountry = {\n        ...country,\n        population: countryPopulation.fields.value,\n      };\n      const perc = (\n        (country.confirmed / countryPopulation.fields.value) *\n        100\n      ).toFixed(2);\n      if (perc + '' !== '0.00') {\n        newCountry.precentage = perc;\n      }\n      return newCountry;\n    });\n\n    const top10 = countries\n      .sort((a, b) => b.confirmed - a.confirmed)\n      .slice(0, 6);\n\n    const labels = top10.map((i) => i.country);\n    const data = top10.map((i) => i.confirmed);\n    const chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Cases per country',\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data,\n        },\n      ],\n    };\n    const lineChartData = {\n      labels: [],\n      datasets: [],\n    };\n    const timeCountries = time.countries\n      .sort((a, b) => {\n        let aTotal = 0;\n        let bTotal = 0;\n        a.locations.forEach((l) => {\n          aTotal += l.total;\n        });\n        b.locations.forEach((l) => {\n          bTotal += l.total;\n        });\n\n        return bTotal - aTotal;\n      })\n      .slice(0, 10);\n\n    timeCountries.forEach((countryTimeData, index) => {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      if (lineChartData.labels.length < 1) {\n        lineChartData.labels = sets.map((i) => {\n          const d = new Date(i.y.replace(/-/g, '/'));\n          const day = d.getDate();\n          const month = d.getMonth() + 1;\n\n          return `${format(day)}.${format(month)}`;\n        });\n      }\n      lineChartData.datasets.push({\n        label: countryTimeData.country,\n        borderColor: colors[index],\n        fill: false,\n        borderWidth: 1,\n        data: sets.map((i) => i.x),\n      });\n    });\n    state.setState({\n      lastUpdated: new Date(d.date.replace(/-/g, '/')),\n      allCases: numberWithCommas(d.confirmed),\n      allDeaths: numberWithCommas(d.deaths),\n      allRecovered: numberWithCommas(d.recovered),\n      countries,\n      filteredCountries: countries,\n      chartData,\n      time,\n      lineChartData,\n    });\n  }\n\n  render() {\n    const {lastUpdated} = state.state;\n\n    return (\n      <Router basename=\"/corona\">\n        <ScrollView contentContainerStyle={styles.container}>\n          <View style={styles.container}>\n            <Text\n              accessibilityRole=\"link\"\n              target=\"_blank\"\n              href=\"https://github.com/CSSEGISandData/COVID-19\"\n              style={[\n                styles.title,\n                {color: '#aaa', padding: 10, width: '100%'},\n              ]}>\n              COVID-19 data provided by Johns Hopkins CSSE\n            </Text>\n            {!lastUpdated ? (\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            ) : (\n              <>\n                <Link to=\"/\">\n                  <Text\n                    style={[\n                      styles.title,\n                      {\n                        color: '#fff',\n                        padding: 10,\n                        width: '100%',\n                        backgroundColor: '#00429d',\n                        lineHeight: 35,\n                      },\n                    ]}>\n                    Go Back Home\n                  </Text>\n                </Link>\n\n                <Switch>\n                  <Route path=\"/country/:country\">\n                    <Country />\n                  </Route>\n                  <Route path=\"/\">\n                    <Home />\n                  </Route>\n                  <Redirect to=\"/\" />\n                </Switch>\n              </>\n            )}\n          </View>\n        </ScrollView>\n      </Router>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default subscribe(App, [state]);\n","import React, {useEffect, useState} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams} from 'react-router-dom';\nimport {\n  LineChart,\n  BarChart,\n  format,\n  numberWithCommas,\n  Box,\n  L,\n  V,\n} from './Chart';\nimport state from './state';\n\nconst Country = () => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [dailyInfections, setDailyInfections] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n\n  useEffect(() => {\n    const {countries, time} = state.state;\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n      const lineChartData = {\n        labels,\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderWidth: 2,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n      const daily = sets.map(\n        (i, index) =>\n          parseInt(i.x) - parseInt((sets[index - 1] && sets[index - 1].x) || 0),\n      );\n      const dailyInfectionsData = {\n        labels: labels.slice(1),\n        datasets: [\n          {\n            label: 'Daily Cases',\n            backgroundColor: '#d45757',\n            borderWidth: 2,\n            data: daily.slice(1),\n          },\n        ],\n      };\n      setDailyInfections(dailyInfectionsData);\n    }\n  }, [country]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            {!!data.population && (\n              <Text key={`population: ${data.population}`} style={styles.text}>\n                <L t=\"Population: \" />\n                <V t={numberWithCommas(data.population)} />\n              </Text>\n            )}\n            {!!data.precentage && (\n              <Text key={`population: ${data.precentage}`} style={styles.text}>\n                <L t=\"Population infected: \" />\n                <V t={data.precentage + '%'} />\n              </Text>\n            )}\n            <Text\n              key={`updated on: ${state.state.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={state.state.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          {!!timeData && (\n            <View style={{width: '80%', marginBottom: 20}}>\n              <LineChart data={timeData} title />\n              {dailyInfections && <LineChart data={dailyInfections} title />}\n              <BarChart\n                data={barData}\n                colors={['#ff2222', '#00ff00', '#ccc']}\n              />\n            </View>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n});\n\nexport default Country;\n","import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TextInput,\n} from 'react-native';\nimport {Link} from 'react-router-dom';\nimport Chart, {LineChart, numberWithCommas, Box, L, V} from './Chart';\nimport state from './state';\n\nconst updateSearch = (search = '') => {\n  state.setState({search});\n  if (search.length) {\n    const filteredCountries = state.state.countries.filter((i) =>\n      i.country.toLowerCase().includes(search.toLowerCase()),\n    );\n    state.setState({filteredCountries});\n  } else {\n    state.setState({filteredCountries: state.state.countries});\n  }\n};\nconst Home = () => {\n  const {\n    lastUpdated,\n    lineChartData,\n    allCases,\n    allDeaths,\n    allRecovered,\n    filteredCountries,\n    search,\n    chartData,\n  } = state.state;\n\n  return (\n    <View style={styles.container}>\n      {!lastUpdated ? (\n        <ActivityIndicator\n          size=\"large\"\n          style={{\n            marginTop: 40,\n            alignSelf: 'center',\n          }}\n        />\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>Worldwide</Text>\n            <Text key={`Total cases: ${allCases}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={allCases} />\n            </Text>\n            <Text key={`Total deaths: ${allDeaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={allDeaths} />\n            </Text>\n            <Text key={`Total recovered: ${allRecovered}`} style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={allRecovered} />\n            </Text>\n            <Text\n              key={`updated on: ${lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          <View\n            style={{\n              width: '80%',\n              marginBottom: 20,\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}>\n            <Chart data={chartData} />\n            <LineChart data={lineChartData} legend />\n            {/* <LineChart data={lineChartData} legend logarithmic /> */}\n          </View>\n          <TextInput\n            style={{\n              height: 40,\n              borderColor: 'gray',\n              borderWidth: 1,\n              backgroundColor: '#ccc',\n              width: '80%',\n              borderRadius: 3,\n              paddingLeft: 8,\n              paddingRight: 8,\n            }}\n            placeholder=\"Type Country Name Here...\"\n            onChangeText={updateSearch}\n            value={search || ''}\n          />\n          <Box>\n            {filteredCountries.length < 1 ? (\n              <Text style={[styles.title, styles.text]}>\n                No counteries were found.. try another search term\n              </Text>\n            ) : (\n              filteredCountries.map(\n                (\n                  {\n                    country,\n                    confirmed,\n                    deaths,\n                    recovered,\n                    population,\n                    precentage,\n                  },\n                  index,\n                ) => {\n                  if (!population) {\n                    console.log(\n                      '--¯_(ツ)_/¯-----------country----------',\n                      country,\n                    );\n                  }\n                  return (\n                    <Link to={`country/${country}`} key={index}>\n                      <View style={styles.country}>\n                        <Text style={[styles.title, styles.text]}>\n                          {country}\n                        </Text>\n                        <Text style={styles.text}>\n                          <L t=\"Cases:\" /> <V t={numberWithCommas(confirmed)} />\n                        </Text>\n                        <Text style={styles.text}>\n                          <L t=\"Deaths: \" />\n                          <V t={numberWithCommas(deaths)} />\n                        </Text>\n                        <Text style={styles.text}>\n                          <L t=\"Recovered: \" />\n                          <V t={numberWithCommas(recovered)} />\n                        </Text>\n\n                        {!!population && (\n                          <Text style={styles.text}>\n                            <L t=\"Population: \" />\n                            <V t={numberWithCommas(population)} />\n                          </Text>\n                        )}\n                        {!!precentage && (\n                          <Text style={styles.text}>\n                            <L t=\"Population infected: \" />\n                            <V t={precentage + '%'} />\n                          </Text>\n                        )}\n                      </View>\n                    </Link>\n                  );\n                },\n              )\n            )}\n          </Box>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n});\n\nexport default Home;\n","const moment = require('moment');\nconst request = require('request');\nconst csv = require('csvtojson');\n// const objectToFile = require('object-to-file');\nexport const d = {};\n// var objectToFiledb = new objectToFile.default('testing-runkit');\n// const db = {\n//   fetch: async (key) => {\n//     const r = localStorage.getItem(key);\n//     // const r = await objectToFiledb.read(key);\n//     return !r ? undefined : r;\n//   },\n//   set: async (key, data) => {\n//     // const r = await objectToFiledb.push(key, data);\n//     const r = localStorage.setItem(key, JSON.stringify(data));\n//     return !r ? undefined : r;\n//   },\n//   delete: async (key) => {\n//     const r = localStorage.removeItem(key);\n//     // const r = await objectToFiledb.delete(key);\n//     return !r ? undefined : r;\n//   },\n// };\n\nclass Covid19 {\n  async getData(date) {\n    let data = {};\n    if (date != undefined) {\n      date = moment(date, 'MM-DD-YYYY').format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    } else {\n      date = moment().format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    }\n    return data;\n  }\n\n  async getTimeSeriesData(type) {\n    var data = {};\n    let date = moment().format('MM-DD-YYYY');\n    type = type.toLowerCase();\n    data = d[type];\n    if (data === undefined || (data && data.lastUpdated !== date)) {\n      await this.addRemoteTimesSeries(type);\n      data = d[type];\n    }\n    return data;\n  }\n\n  async fetchData(date) {\n    var data = {};\n    //console.log(`Fetching data from: ${date}`)\n    data = d[date];\n    while (\n      data === undefined &&\n      moment(date, 'MM-DD-YYYY') >= moment('01-22-2020', 'MM-DD-YYYY')\n    ) {\n      //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from ${date}`)\n      await this.addRemoteDailyReports(date);\n      data = d[date];\n      if (data == undefined) {\n        //console.log(`REMOTE data from ${date} not found...attempting to fetch LOCAL data from one day before.`)\n        date = moment(date, 'MM-DD-YYYY')\n          .subtract(1, 'days')\n          .format('MM-DD-YYYY');\n        data = d[date];\n        if (data === undefined) {\n          //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from one day before.`)\n          await this.addRemoteDailyReports(date);\n          data = d[date];\n        }\n      }\n    }\n    if (data === undefined) {\n      data = {error: 'Data not found. Plase try again.'};\n    }\n    return data;\n  }\n\n  async addRemoteDailyReports(date) {\n    let locations = [];\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var obj = {};\n          if (\n            moment(date, 'MM-DD-YYYY') <= moment('03-22-2020', 'MM-DD-YYYY')\n          ) {\n            obj = {\n              country: json['Country/Region'] || '',\n              state: json['Province/State'] || '',\n              lat: json['Latitude'] || '0.0',\n              lon: json['Longitude'] || '0.0',\n              lastUpdate: json['Last Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          } else {\n            // console.log('after 03-22-2020');\n            obj = {\n              country: json['Country_Region'] || '',\n              state: json['Province_State'] || '',\n              lat: json['Lat'] || '0.0',\n              lon: json['Long_'] || '0.0',\n              lastUpdate: json['Last_Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          }\n          locations.push(obj);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (locations.length > 0) {\n          let countries = await this.groupBy('country', locations, date);\n          delete d[date];\n          d[date] = countries;\n        }\n      });\n  }\n\n  async groupBy(key, array, date) {\n    var json = {};\n    var result = [];\n    var totalConfirmed = 0;\n    var totalRecovered = 0;\n    var totalDeaths = 0;\n\n    var allConfirmed = 0;\n    var allRecovered = 0;\n    var allDeaths = 0;\n\n    json.countries = result;\n\n    for (var i = 0; i < array.length; i++) {\n      var added = false;\n      totalConfirmed = 0;\n      totalRecovered = 0;\n      totalDeaths = 0;\n\n      allConfirmed += parseInt(array[i].confirmed);\n      allRecovered += parseInt(array[i].recovered);\n      allDeaths += parseInt(array[i].deaths);\n\n      // adds the reset of the locations for the country\n      for (var j = 0; j < result.length; j++) {\n        if (result[j][key] == array[i][key]) {\n          totalConfirmed += parseInt(array[i].confirmed);\n          result[j].confirmed = totalConfirmed + parseInt(result[j].confirmed);\n\n          totalRecovered += parseInt(array[i].recovered);\n          result[j].recovered = totalRecovered + parseInt(result[j].recovered);\n\n          totalDeaths += parseInt(array[i].deaths);\n          result[j].deaths = totalDeaths + parseInt(result[j].deaths);\n\n          result[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        totalConfirmed = 0;\n        totalRecovered = 0;\n        totalDeaths = 0;\n        var entry = {locations: []};\n\n        totalConfirmed += parseInt(array[i].confirmed);\n        entry['confirmed'] = totalConfirmed;\n\n        totalRecovered += parseInt(array[i].recovered);\n        entry['recovered'] = totalRecovered;\n\n        totalDeaths += parseInt(array[i].deaths);\n        entry['deaths'] = totalDeaths;\n\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n\n        entry.locations.push(array[i]);\n        result.push(entry);\n      }\n    }\n\n    json.date = date;\n    json.confirmed = allConfirmed;\n    json.recovered = allRecovered;\n    json.deaths = allDeaths;\n\n    return json;\n  }\n\n  async addRemoteTimesSeries(type) {\n    var countries = [];\n    let min = moment('2020-03-11');\n    let max = moment();\n    //let initCapType = type.charAt(0).toUpperCase() + type.slice(1)\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${type}_global.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var location = {\n            country: json['Country/Region'] || '',\n            state: json['Province/State'] || '',\n            lat: json['Lat'] || '0.0',\n            lon: json['Long'] || '0.0',\n          };\n          let dates = [];\n          for (\n            var m = moment(min);\n            m.diff(max, 'days') <= 0;\n            m.add(1, 'days')\n          ) {\n            let date = m.format('M/D/YY');\n            if (json[date] != undefined) {\n              let value = parseInt(json[date]) || 0;\n              let dateObj = {\n                [m.format('MM-DD-YYYY')]: value,\n              };\n              dates.push(dateObj);\n            }\n          }\n\n          if (dates.length > 0) {\n            let lastDate = dates[dates.length - 1];\n            location.total = Object.values(lastDate)[0];\n          }\n\n          location.dates = dates;\n          countries.push(location);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (countries.length > 0) {\n          countries = await this.groupByTimesSeries('country', countries);\n\n          delete d[type];\n          d[type] = countries;\n        }\n      });\n  }\n\n  async groupByTimesSeries(key, array) {\n    let root = {};\n    var locations = [];\n    var grandTotal = 0;\n\n    root.countries = locations;\n\n    for (var i = 0; i < array.length; i++) {\n      var total = 0;\n      var added = false;\n      // adds the reset of the locations for the country\n      for (var j = 0; j < locations.length; j++) {\n        if (locations[j][key] == array[i][key]) {\n          total += parseInt(array[i].total) || 0;\n          locations[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        var entry = {locations: []};\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n        total += parseInt(array[i]['total']) || 0;\n        entry.locations.push(array[i]);\n        locations.push(entry);\n      }\n\n      locations[j].total = total;\n      grandTotal += total;\n    }\n\n    root.lastUpdated = moment().format('MM-DD-YYYY');\n    root.total = grandTotal;\n    return root;\n  }\n}\n\nmodule.exports = Covid19;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}