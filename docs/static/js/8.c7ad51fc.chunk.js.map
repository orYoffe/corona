{"version":3,"sources":["components/HomeCharts.js"],"names":["Chart","React","lazy","LineChart","then","module","default","setNewChartData","sort","chartData","generateBarData","state","getState","countries","slice","chartList","chartState","setState","styles","StyleSheet","create","container","width","marginBottom","flexDirection","justifyContent","alignItems","loader","marginTop","height","alignSelf","subscribe","memo","lineChartData","View","style","options","onSelect","label","Suspense","fallback","ActivityIndicator","size","data","legend","timeState"],"mappings":"2KAAA,cACA,SACA,SACA,YACA,YACA,SAEMA,EAAQC,UAAMC,MAAK,kBAAM,2DACzBC,EAAYF,UAAMC,MAAK,kBAC3B,wDAAkBE,MAAK,SAACC,GAAD,MAAa,CAClCC,QAASD,EAAOF,iBAIdI,EAAkB,WAAyB,IAAxBC,EAAuB,uDAAhB,YACxBC,GAAY,IAAAC,iBAChBC,UAAMC,WAAWC,UAAUC,MAAM,GACjCC,YAAUP,IAGZQ,aAAWC,SAAS,CAACR,eA0BjBS,EAASC,aAAWC,OAAO,CAC/BC,UAAW,CACTC,MAAO,MACPC,aAAc,GACdC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,OAAQ,CACNC,UAAW,GACXC,OAAQ,IACRC,UAAW,Y,GAGI,IAAAC,YACjB,IAAAC,OAvCa,SAAC,GAAgC,IAA/BvB,EAA8B,EAA9BA,UAAWwB,EAAmB,EAAnBA,cAC1B,OACE,wBAAC,EAAAC,KAAD,CAAMC,MAAOjB,EAAOG,WAClB,wBAAC,UAAD,CACEe,QAASrB,YACTsB,SAAU9B,EACV+B,MAAM,sBAGP7B,GACC,wBAAC,EAAA8B,SAAD,CACEC,SAAU,wBAAC,EAAAC,kBAAD,CAAmBC,KAAK,QAAQP,MAAOjB,EAAOS,UACxD,wBAAC3B,EAAD,CAAO2C,KAAMlC,KAGhBwB,GACC,wBAAC,EAAAM,SAAD,CAAUC,SAAS,IACjB,wBAACrC,EAAD,CAAWwC,KAAMV,EAAeW,QAAM,SAuB9C,CAAC5B,aAAY6B,cACb,SAAC7B,EAAY6B,GAAb,MAA4B,CAC1BZ,cAAeY,EAAUZ,cACzBxB,UAAWO,EAAWP,c","file":"static/js/8.c7ad51fc.chunk.js","sourcesContent":["import React, {memo, Suspense} from 'react';\nimport {View, ActivityIndicator, StyleSheet} from 'react-native';\nimport {subscribe} from 'jstates-react';\nimport state, {chartState, timeState} from '../state';\nimport DropDown from './DropDown';\nimport {generateBarData, chartList} from '../utils';\n\nconst Chart = React.lazy(() => import('./Chart'));\nconst LineChart = React.lazy(() =>\n  import('./Chart').then((module) => ({\n    default: module.LineChart,\n  })),\n);\n\nconst setNewChartData = (sort = 'confirmed') => {\n  const chartData = generateBarData(\n    state.getState().countries.slice(0),\n    chartList[sort],\n  );\n\n  chartState.setState({chartData});\n};\nconst Charts = ({chartData, lineChartData}) => {\n  return (\n    <View style={styles.container}>\n      <DropDown\n        options={chartList}\n        onSelect={setNewChartData}\n        label=\"Select chart data\"\n      />\n\n      {chartData && (\n        <Suspense\n          fallback={<ActivityIndicator size=\"large\" style={styles.loader} />}>\n          <Chart data={chartData} />\n        </Suspense>\n      )}\n      {lineChartData && (\n        <Suspense fallback=\"\">\n          <LineChart data={lineChartData} legend />\n        </Suspense>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '90%',\n    marginBottom: 20,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loader: {\n    marginTop: 40,\n    height: 200,\n    alignSelf: 'center',\n  },\n});\nconst HomeCharts = subscribe(\n  memo(Charts),\n  [chartState, timeState],\n  (chartState, timeState) => ({\n    lineChartData: timeState.lineChartData,\n    chartData: chartState.chartData,\n  }),\n);\n\nexport default HomeCharts;\n"],"sourceRoot":""}