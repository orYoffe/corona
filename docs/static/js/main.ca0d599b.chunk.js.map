{"version":3,"sources":["utils.js","state.js","index.js","App.js","jsu.js","serviceWorker.js"],"names":["x","shouldRound","s","toString","replace","decimal","length","slice","Cases","Recovered","Deaths","countries","sort","top10","a","b","labels","map","i","country","data","chartData","datasets","label","backgroundColor","borderColor","borderWidth","Box","memo","children","style","View","margin","padding","width","L","t","Text","color","V","createState","lastUpdated","search","ReactDOM","render","document","getElementById","serviceWorker","unregister","Country","React","lazy","Home","covid19","require","countryNamesExceptions","US","Iran","Russia","Czechia","Egypt","Slovakia","Kyrgyzstan","Venezuela","Brunei","Gambia","parseData","d","time","j","newCountry","active","confirmed","recovered","deaths","countryPopulations","records","filter","countryName","fields","country_name","toLowerCase","countryPopulation","year","value","population","perc","toFixed","precentage","state","setState","Date","date","allCases","numberWithCommas","allDeaths","allRecovered","filteredCountries","generateBarData","lineChartData","timeCountries","forEach","countryTimeData","index","sets","locations","dates","total","Object","keys","location","y","day","getDate","month","getMonth","format","push","colors","fill","getLineChartData","aTotal","bTotal","l","Promise","all","getData","getTimeSeriesData","fetch","then","json","console","log","styles","StyleSheet","create","container","alignItems","minHeight","title","fontWeight","fontSize","basename","ScrollView","contentContainerStyle","accessibilityRole","target","href","textAlign","Suspense","fallback","ActivityIndicator","size","marginTop","alignSelf","Switch","Route","path","Redirect","to","moment","request","csv","Covid19","undefined","this","fetchData","type","addRemoteTimesSeries","addRemoteDailyReports","subtract","error","fromStream","get","subscribe","resolve","reject","obj","lat","lon","lastUpdate","parseInt","groupBy","key","array","totalConfirmed","totalRecovered","totalDeaths","allConfirmed","result","added","entry","min","max","m","diff","add","dateObj","lastDate","values","groupByTimesSeries","grandTotal","root","module","exports","config","navigator","URL","process","window","origin","addEventListener","swUrl","isLocalhost","headers","response","contentType","status","indexOf","ready","registration","reload","registerValidSW","catch","checkValidServiceWorker","message","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.ca0d599b.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {Text, View} from 'react-native';\n\nexport const chartList = {\n  Cases: 'confirmed',\n  'Active cases': 'active',\n  Recovered: 'recovered',\n  Deaths: 'deaths',\n  'Population infected': 'precentage',\n};\n\nexport const generateBarData = (countries, sort = 'confirmed') => {\n  const top10 = countries.sort((a, b) => b[sort] - a[sort]).slice(0, 9);\n\n  const labels = top10.map((i) => i.country);\n  const data = top10.map((i) => i[sort]);\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Cases per country',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data,\n      },\n    ],\n  };\n\n  return chartData;\n};\n\nexport const format = (i) => (i < 10 ? `0${i}` : i);\nexport const colors = [\n  '#ff0029',\n  '#377eb8',\n  '#7f80cd',\n  '#66a61e',\n  '#984ea3',\n  '#00d2d5',\n  '#ff7f00',\n  '#af8d00',\n  '#b3e900',\n  '#fec254',\n  '#ccebc5',\n  '#a63603',\n  '#016c59',\n  '#e7298a',\n  '#c994c7',\n  '#dfdf00',\n  '#df00df',\n  '#80ff80',\n];\n\nexport const Box = memo(({children, style}) => (\n  <View\n    style={[\n      {\n        margin: 10,\n        padding: 10,\n        width: '80%',\n      },\n      style,\n    ]}>\n    {children}\n  </View>\n));\n\nexport const L = memo(({t}) => (\n  <Text\n    style={{\n      color: '#ddd',\n    }}>\n    {t}\n  </Text>\n));\nexport const V = memo(({t}) => (\n  <Text\n    style={{\n      color: '#fff',\n    }}>\n    {t}\n  </Text>\n));\n\nexport function numberWithCommas(x, shouldRound) {\n  const s = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  if (shouldRound && x > 999) {\n    let decimal = '';\n    if (x < 2000 && s.length > 4 && s.slice(-3) !== '000') {\n      decimal = `.${s.slice(-3)[0]}`;\n    }\n\n    return `${s.slice(0, s.length - 4)}${decimal}K`;\n  }\n  return s;\n}\n","import {createState} from 'jstates-react';\n\nconst state = createState({\n  lastUpdated: null,\n  search: '',\n});\n\nexport default state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {memo, Suspense} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport {generateBarData, numberWithCommas, colors, format} from './utils';\nimport state from './state';\nconst Country = React.lazy(() => import('./Country'));\nconst Home = React.lazy(() => import('./Home'));\n\nconst Covid19 = require('./jsu');\nconst covid19 = new Covid19();\n\nconst getLineChartData = (timeCountries) => {\n  const lineChartData = {\n    labels: [],\n    datasets: [],\n  };\n\n  timeCountries.forEach((countryTimeData, index) => {\n    const sets = countryTimeData.locations[0].dates.map((i, index) => {\n      let total = 0;\n      const time = Object.keys(i)[0];\n      countryTimeData.locations.forEach((location) => {\n        total += location.dates[index][time];\n      });\n      return {y: time, x: total};\n    });\n    if (lineChartData.labels.length < 1) {\n      lineChartData.labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n    }\n    lineChartData.datasets.push({\n      label: countryTimeData.country.slice(0),\n      borderColor: colors[index].slice(0),\n      fill: false,\n      borderWidth: 1,\n      data: sets.map((i) => i.x),\n    });\n  });\n\n  return lineChartData;\n};\n\nconst countryNamesExceptions = {\n  US: 'United States',\n  Iran: 'Iran, Islamic Rep.',\n  Russia: 'Russian Federation',\n  'Korea, South': 'Korea, Rep.',\n  Czechia: 'Czech Republic',\n  Egypt: 'Egypt, Arab Rep.',\n  Slovakia: 'Slovak Republic',\n  Kyrgyzstan: 'Kyrgyz Republic',\n  Venezuela: 'Venezuela, RB',\n  Brunei: 'Brunei Darussalam',\n  Gambia: 'Gambia, The',\n};\nconst parseData = (d, time, j) => {\n  const countries = d.countries\n    .map((country) => {\n      const newCountry = {\n        ...country,\n        active: country.confirmed - (country.recovered + country.deaths),\n      };\n\n      const countryPopulations = j.records.filter((i) => {\n        const countryName = i.fields.country_name;\n        return (\n          countryName.toLowerCase() === country.country.toLowerCase() ||\n          countryName === countryNamesExceptions[country.country]\n        );\n      });\n\n      if (!countryPopulations.length) {\n        return newCountry;\n      }\n\n      const countryPopulation = countryPopulations.sort(\n        (a, b) => b.fields.year - a.fields.year,\n      )[0];\n\n      if (!countryPopulation || !countryPopulation.fields.value) {\n        return newCountry;\n      }\n\n      newCountry.population = countryPopulation.fields.value;\n      const perc = (\n        (country.confirmed / countryPopulation.fields.value) *\n        100\n      ).toFixed(2);\n\n      if (perc + '' !== '0.00') {\n        newCountry.precentage = perc;\n      }\n\n      return newCountry;\n    })\n    .sort((a, b) => b.confirmed - a.confirmed);\n\n  state.setState({\n    lastUpdated: new Date(d.date.replace(/-/g, '/')),\n    allCases: numberWithCommas(d.confirmed),\n    allDeaths: numberWithCommas(d.deaths),\n    allRecovered: numberWithCommas(d.recovered),\n    countries,\n    filteredCountries: countries,\n    time,\n  });\n  const chartData = generateBarData(countries.slice(0));\n  state.setState({\n    chartData,\n  });\n  const timeCountries = time.countries\n    .sort((a, b) => {\n      let aTotal = 0;\n      let bTotal = 0;\n      a.locations.forEach((l) => {\n        aTotal += l.total;\n      });\n      b.locations.forEach((l) => {\n        bTotal += l.total;\n      });\n\n      return bTotal - aTotal;\n    })\n    .slice(0, 10);\n  const lineChartData = getLineChartData(timeCountries);\n\n  state.setState({lineChartData});\n};\n\nPromise.all([\n  covid19.getData(),\n  covid19.getTimeSeriesData('confirmed'),\n  fetch(\n    'https://data.opendatasoft.com/api/records/1.0/search/?dataset=world-population%40kapsarc&rows=10000&sort=year&facet=year&facet=country_name',\n  ).then((j) => j.json()),\n]).then(([d, time, j]) => {\n  console.log('--¯_(ツ)_/¯-----------d----------', d);\n  console.log('--¯_(ツ)_/¯-----------time----------', time);\n  console.log('--¯_(ツ)_/¯-----------j----------', j);\n  parseData(d, time, j);\n});\n\nconst App = () => {\n  return (\n    <Router basename=\"/corona\">\n      <ScrollView contentContainerStyle={styles.container}>\n        <View style={styles.container}>\n          <Text\n            accessibilityRole=\"link\"\n            target=\"_blank\"\n            href=\"https://github.com/CSSEGISandData/COVID-19\"\n            style={[\n              styles.title,\n              {\n                color: '#aaa',\n                padding: 10,\n                width: '100%',\n                textAlign: 'center',\n              },\n            ]}>\n            COVID-19 data provided by Johns Hopkins CSSE\n          </Text>\n          <Suspense\n            fallback={\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            }>\n            <Switch>\n              <Route path=\"/country/:country\">\n                <Country />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n              <Redirect to=\"/\" />\n            </Switch>\n          </Suspense>\n        </View>\n      </ScrollView>\n    </Router>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#222222',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default memo(App);\n","const moment = require('moment');\nconst request = require('request');\nconst csv = require('csvtojson');\n\nexport const d = {};\n\nclass Covid19 {\n  async getData(date) {\n    let data = {};\n    if (date != undefined) {\n      date = moment(date, 'MM-DD-YYYY').format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    } else {\n      date = moment().format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    }\n    return data;\n  }\n\n  async getTimeSeriesData(type) {\n    var data = {};\n    let date = moment().format('MM-DD-YYYY');\n    type = type.toLowerCase();\n    data = d[type];\n    if (data === undefined || (data && data.lastUpdated !== date)) {\n      await this.addRemoteTimesSeries(type);\n      data = d[type];\n    }\n    return data;\n  }\n\n  async fetchData(date) {\n    var data = {};\n    //console.log(`Fetching data from: ${date}`)\n    data = d[date];\n    while (\n      data === undefined &&\n      moment(date, 'MM-DD-YYYY') >= moment('01-22-2020', 'MM-DD-YYYY')\n    ) {\n      //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from ${date}`)\n      await this.addRemoteDailyReports(date);\n      data = d[date];\n      if (data == undefined) {\n        //console.log(`REMOTE data from ${date} not found...attempting to fetch LOCAL data from one day before.`)\n        date = moment(date, 'MM-DD-YYYY')\n          .subtract(1, 'days')\n          .format('MM-DD-YYYY');\n        data = d[date];\n        if (data === undefined) {\n          //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from one day before.`)\n          await this.addRemoteDailyReports(date);\n          data = d[date];\n        }\n      }\n    }\n    if (data === undefined) {\n      data = {error: 'Data not found. Plase try again.'};\n    }\n    return data;\n  }\n\n  async addRemoteDailyReports(date) {\n    let locations = [];\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var obj = {};\n          if (\n            moment(date, 'MM-DD-YYYY') <= moment('03-22-2020', 'MM-DD-YYYY')\n          ) {\n            obj = {\n              country: json['Country/Region'] || '',\n              state: json['Province/State'] || '',\n              lat: json['Latitude'] || '0.0',\n              lon: json['Longitude'] || '0.0',\n              lastUpdate: json['Last Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          } else {\n            // console.log('after 03-22-2020');\n            obj = {\n              country: json['Country_Region'] || '',\n              state: json['Province_State'] || '',\n              lat: json['Lat'] || '0.0',\n              lon: json['Long_'] || '0.0',\n              lastUpdate: json['Last_Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          }\n          locations.push(obj);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (locations.length > 0) {\n          let countries = await this.groupBy('country', locations, date);\n          delete d[date];\n          d[date] = countries;\n        }\n      });\n  }\n\n  async groupBy(key, array, date) {\n    var json = {};\n    var result = [];\n    var totalConfirmed = 0;\n    var totalRecovered = 0;\n    var totalDeaths = 0;\n\n    var allConfirmed = 0;\n    var allRecovered = 0;\n    var allDeaths = 0;\n\n    json.countries = result;\n\n    for (var i = 0; i < array.length; i++) {\n      var added = false;\n      totalConfirmed = 0;\n      totalRecovered = 0;\n      totalDeaths = 0;\n\n      allConfirmed += parseInt(array[i].confirmed);\n      allRecovered += parseInt(array[i].recovered);\n      allDeaths += parseInt(array[i].deaths);\n\n      // adds the reset of the locations for the country\n      for (var j = 0; j < result.length; j++) {\n        if (result[j][key] == array[i][key]) {\n          totalConfirmed += parseInt(array[i].confirmed);\n          result[j].confirmed = totalConfirmed + parseInt(result[j].confirmed);\n\n          totalRecovered += parseInt(array[i].recovered);\n          result[j].recovered = totalRecovered + parseInt(result[j].recovered);\n\n          totalDeaths += parseInt(array[i].deaths);\n          result[j].deaths = totalDeaths + parseInt(result[j].deaths);\n\n          result[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        totalConfirmed = 0;\n        totalRecovered = 0;\n        totalDeaths = 0;\n        var entry = {locations: []};\n\n        totalConfirmed += parseInt(array[i].confirmed);\n        entry['confirmed'] = totalConfirmed;\n\n        totalRecovered += parseInt(array[i].recovered);\n        entry['recovered'] = totalRecovered;\n\n        totalDeaths += parseInt(array[i].deaths);\n        entry['deaths'] = totalDeaths;\n\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n\n        entry.locations.push(array[i]);\n        result.push(entry);\n      }\n    }\n\n    json.date = date;\n    json.confirmed = allConfirmed;\n    json.recovered = allRecovered;\n    json.deaths = allDeaths;\n\n    return json;\n  }\n\n  async addRemoteTimesSeries(type) {\n    var countries = [];\n    let min = moment('2020-03-11');\n    let max = moment();\n    //let initCapType = type.charAt(0).toUpperCase() + type.slice(1)\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${type}_global.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var location = {\n            country: json['Country/Region'] || '',\n            state: json['Province/State'] || '',\n            lat: json['Lat'] || '0.0',\n            lon: json['Long'] || '0.0',\n          };\n          let dates = [];\n          for (\n            var m = moment(min);\n            m.diff(max, 'days') <= 0;\n            m.add(1, 'days')\n          ) {\n            let date = m.format('M/D/YY');\n            if (json[date] != undefined) {\n              let value = parseInt(json[date]) || 0;\n              let dateObj = {\n                [m.format('MM-DD-YYYY')]: value,\n              };\n              dates.push(dateObj);\n            }\n          }\n\n          if (dates.length > 0) {\n            let lastDate = dates[dates.length - 1];\n            location.total = Object.values(lastDate)[0];\n          }\n\n          location.dates = dates;\n          countries.push(location);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (countries.length > 0) {\n          countries = await this.groupByTimesSeries('country', countries);\n\n          delete d[type];\n          d[type] = countries;\n        }\n      });\n  }\n\n  async groupByTimesSeries(key, array) {\n    let root = {};\n    var locations = [];\n    var grandTotal = 0;\n\n    root.countries = locations;\n\n    for (var i = 0; i < array.length; i++) {\n      var total = 0;\n      var added = false;\n      // adds the reset of the locations for the country\n      for (var j = 0; j < locations.length; j++) {\n        if (locations[j][key] == array[i][key]) {\n          total += parseInt(array[i].total) || 0;\n          locations[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        var entry = {locations: []};\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n        total += parseInt(array[i]['total']) || 0;\n        entry.locations.push(array[i]);\n        locations.push(entry);\n      }\n\n      locations[j].total = total;\n      grandTotal += total;\n    }\n\n    root.lastUpdated = moment().format('MM-DD-YYYY');\n    root.total = grandTotal;\n    return root;\n  }\n}\n\nmodule.exports = Covid19;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}