{"version":3,"sources":["state.js","colors.js","utils.js","index.js","App.js","serviceWorker.js","jsu.js","initData.js"],"names":["state","createState","lastUpdated","timeState","searchState","search","countryState","chartState","x","shouldRound","s","toString","replace","decimal","length","slice","Cases","Recovered","Deaths","countries","sort","top10","a","b","labels","map","i","country","data","chartData","datasets","label","backgroundColor","borderColor","borderWidth","Box","memo","children","style","View","width","L","t","Text","color","V","white","localStorage","getItem","JSON","parse","j","d","console","log","parseData","window","__j__","__d__","Promise","all","getData","fetch","then","json","setItem","stringify","getTimeSeriesData","parseTimeData","deaths","setState","recovered","ReactDOM","createRoot","document","getElementById","render","serviceWorker","register","Country","React","lazy","Home","styles","StyleSheet","create","container","black","alignItems","minHeight","title","fontWeight","fontSize","basename","ScrollView","contentContainerStyle","accessibilityRole","target","href","padding","textAlign","Suspense","fallback","ActivityIndicator","size","marginTop","alignSelf","Switch","Route","path","Redirect","to","config","navigator","URL","process","location","origin","addEventListener","swUrl","isLocalhost","headers","response","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","error","message","Boolean","hostname","match","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","moment","require","request","csv","date","undefined","format","fetchData","type","toLowerCase","addRemoteTimesSeries","addRemoteDailyReports","subtract","locations","fromStream","subscribe","resolve","reject","obj","lat","lon","lastUpdate","confirmed","parseInt","push","groupBy","key","array","totalConfirmed","totalRecovered","totalDeaths","allConfirmed","allRecovered","allDeaths","result","added","entry","min","max","dates","m","diff","add","value","dateObj","lastDate","total","Object","values","groupByTimesSeries","grandTotal","root","countryNamesExceptions","US","Iran","Russia","Czechia","Egypt","Slovakia","Kyrgyzstan","Venezuela","Brunei","Gambia","time","lineChartData","timeCountries","forEach","countryTimeData","index","sets","keys","y","Date","day","getDate","month","getMonth","colors","fill","getLineChartData","aTotal","bTotal","l","sortTime","newCountry","active","countryPopulations","records","filter","countryName","fields","country_name","countryPopulation","year","population","perc","toFixed","precentage","allCases","numberWithCommas","filteredCountries","generateBarData"],"mappings":"6MAAA,aAEMA,GAAQ,IAAAC,aAAY,CACxBC,YAAa,OAGFC,GAAY,IAAAF,aAAY,I,cAC9B,IAAMG,GAAc,IAAAH,aAAY,CACrCI,OAAQ,K,gBAEH,IAAMC,GAAe,IAAAL,aAAY,I,iBACjC,IAAMM,GAAa,IAAAN,aAAY,I,qBAEvBD,E,+GCbM,U,QACA,W,oGCmFd,SAA0BQ,EAAGC,GAClC,IAAMC,EAAIF,EAAEG,WAAWC,QAAQ,wBAAyB,KACxD,GAAIH,GAAeD,EAAI,IAAK,CAC1B,IAAIK,EAAU,GAKd,OAJIL,EAAI,KAAQE,EAAEI,OAAS,GAAqB,QAAhBJ,EAAEK,OAAO,KACvCF,EAAO,WAAOH,EAAEK,OAAO,GAAG,KAGtB,GAAN,OAAUL,EAAEK,MAAM,EAAGL,EAAEI,OAAS,IAAhC,OAAqCD,EAArC,KAEF,OAAOH,G,qEA9FT,cACA,SACA,S,YAEyB,CACvBM,MAAO,YACP,eAAgB,SAChBC,UAAW,YACXC,OAAQ,SACR,sBAAuB,c,kBAGM,SAACC,GAAmC,IAAxBC,EAAuB,uDAAhB,YAC1CC,EAAQF,EAAUC,MAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAEH,GAAQE,EAAEF,MAAOL,MAAM,EAAG,GAE7DS,EAASH,EAAMI,KAAI,SAACC,GAAD,OAAOA,EAAEC,WAC5BC,EAAOP,EAAMI,KAAI,SAACC,GAAD,OAAOA,EAAEN,MAC1BS,EAAY,CAChBL,SACAM,SAAU,CACR,CACEC,MAAO,oBACPC,gBAAiB,qBACjBC,YAAa,gBACbC,YAAa,EACbN,UAKN,OAAOC,G,SAGa,SAACH,GAAD,OAAQA,EAAI,GAAJ,WAAaA,GAAMA,G,SAC3B,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGK,IAAMS,GAAM,IAAAC,OAAK,gBAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,MAAZ,OACtB,wBAAC,EAAAC,KAAD,CACED,MAAO,CACL,CACEE,MAAO,OAETF,IAEDD,M,QAIE,IAAMI,GAAI,IAAAL,OAAK,gBAAEM,EAAF,EAAEA,EAAF,OACpB,wBAAC,EAAAC,KAAD,CACEL,MAAO,CACLM,MAAO,SAERF,M,MAGE,IAAMG,GAAI,IAAAT,OAAK,gBAAEM,EAAF,EAAEA,EAAF,OACpB,wBAAC,EAAAC,KAAD,CACEL,MAAO,CACLM,MAAOE,UAERJ,M,iGChFL,UACA,WACA,OACA,gBACA,YACA,SACA,SACA,SAIId,EAAOmB,aAAaC,QAFV,MAGdpB,EAAOA,GAAQqB,KAAKC,MAAMtB,KAEdA,EAAKuB,GAAKvB,EAAKwB,GACzBC,QAAQC,IAAI,uEACZ,IAAAC,WAAU3B,EAAKwB,EAAGxB,EAAKuB,IACdK,OAAOC,OAASD,OAAOE,QAChCL,QAAQC,IAAI,6DACZ,IAAAC,WAAUC,OAAOE,MAAOF,OAAOC,QAGjCE,QAAQC,IAAI,EACV,IAAAC,WACAC,MACE,+IACAC,MAAK,SAACZ,GAAD,OAAOA,EAAEa,YACfD,MAAK,YAAa,IAAD,qBAAVX,EAAU,KAAPD,EAAO,KAClBE,QAAQC,IAAI,8CAAoCF,GAChDC,QAAQC,IAAI,8CAAoCH,IAChD,IAAAI,WAAUH,EAAGD,GACbJ,aAAakB,QAtBD,IAsBgBhB,KAAKiB,UAAU,CAACd,IAAGD,WAGjD,IAAAgB,mBAAkB,aAAaJ,KAAKK,kBACpC,IAAAD,mBAAkB,UAAUJ,MAAK,SAACM,GAChChB,QAAQC,IAAI,mDAAyCe,GACrD/D,eAAagE,SAAS,CAACD,eAEzB,IAAAF,mBAAkB,aAAaJ,MAAK,SAACQ,GACnClB,QAAQC,IAAI,sDAA4CiB,GACxDjE,eAAagE,SAAS,CAACC,iBAEzBC,UAASC,WAAWC,SAASC,eAAe,SAASC,OAAO,wBAAC,UAAD,OAM5DC,EAAcC,Y,wHCjDd,cACA,SAOA,SAMA,SACMC,EAAUC,UAAMC,MAAK,kBAAM,2DAC3BC,EAAOF,UAAMC,MAAK,kBAAM,qCAgDxBE,EAASC,aAAWC,OAAO,CAC/BC,UAAW,CACTtD,gBAAiBuD,QACjBC,WAAY,SACZC,UAAW,OACXjD,MAAO,QAETkD,MAAO,CACL9C,MAAOE,QACP6C,WAAY,OACZC,SAAU,M,GAIC,IAAAxD,OA5DH,WACV,OACE,wBAAC,gBAAD,CAAQyD,SAAS,WACf,wBAAC,EAAAC,WAAD,CAAYC,sBAAuBZ,EAAOG,WACxC,wBAAC,EAAA/C,KAAD,CAAMD,MAAO6C,EAAOG,WAClB,wBAAC,EAAA3C,KAAD,CACEqD,kBAAkB,OAClBC,OAAO,SACPC,KAAK,6CACL5D,MAAO,CACL6C,EAAOO,MACP,CACE9C,MAAO,OACPuD,QAAS,GACT3D,MAAO,OACP4D,UAAW,YAVjB,gDAeA,wBAAC,EAAAC,SAAD,CACEC,SACE,wBAAC,EAAAC,kBAAD,CACEC,KAAK,QACLlE,MAAO,CACLmE,UAAW,GACXC,UAAW,aAIjB,wBAAC,EAAAC,OAAD,KACE,wBAAC,EAAAC,MAAD,CAAOC,KAAK,qBACV,wBAAC9B,EAAD,OAEF,wBAAC,EAAA6B,MAAD,CAAOC,KAAK,KACV,wBAAC3B,EAAD,OAEF,wBAAC,EAAA4B,SAAD,CAAUC,GAAG,c,6FCjCpB,SAAkBC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,UAAwB3D,OAAO4D,SAASlB,MACpDmB,SAAW7D,OAAO4D,SAASC,OAIvC,OAGF7D,OAAO8D,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMJ,UAAN,sBAEPK,IAgEV,SAAiCD,EAAOP,GAEtClD,MAAMyD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5B1D,MAAK,SAAA2D,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cb,UAAUpC,cAAckD,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,aAAalE,MAAK,WAC7BP,OAAO4D,SAASc,eAKpBC,EAAgBZ,EAAOP,MAG1BoB,OAAM,WACL/E,QAAQC,IACN,oEAvFA+E,CAAwBd,EAAOP,GAI/BC,UAAUpC,cAAckD,MAAMhE,MAAK,WACjCV,QAAQC,IACN,iHAMJ6E,EAAgBZ,EAAOP,Q,aAgFxB,WACD,kBAAmBC,WACrBA,UAAUpC,cAAckD,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdG,OAAM,SAAAE,GACLjF,QAAQiF,MAAMA,EAAMC,aA7H5B,IAAMf,EAAcgB,QACW,cAA7BhF,OAAO4D,SAASqB,UAEe,UAA7BjF,OAAO4D,SAASqB,UAEhBjF,OAAO4D,SAASqB,SAASC,MACvB,2DAsCN,SAASP,EAAgBZ,EAAOP,GAC9BC,UAAUpC,cACPC,SAASyC,GACTxD,MAAK,SAAAiE,GACJA,EAAaW,cAAgB,WAC3B,IAAMC,EAAmBZ,EAAaa,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5I,QACfiH,UAAUpC,cAAckE,YAI1B1F,QAAQC,IACN,iHAKE0D,GAAUA,EAAOgC,UACnBhC,EAAOgC,SAAShB,KAMlB3E,QAAQC,IAAI,sCAGR0D,GAAUA,EAAOiC,WACnBjC,EAAOiC,UAAUjB,WAO5BI,OAAM,SAAAE,GACLjF,QAAQiF,MAAM,4CAA6CA,Q,oTChG3DY,EAASC,EAAQ,KACjBC,EAAUD,EAAQ,KAClBE,EAAMF,EAAQ,KAEP/F,EAAI,G,SAEKS,E,sFAAf,WAAuByF,GAAvB,gFACD1H,EAAO,QACC2H,GAARD,EAFC,uBAGHA,EAAOJ,EAAOI,EAAM,cAAcE,OAAO,cAHtC,SAIUC,EAAUH,GAJpB,OAIH1H,EAJG,qCAMH0H,EAAOJ,IAASM,OAAO,cANpB,UAOUC,EAAUH,GAPpB,QAOH1H,EAPG,wCASEA,GATF,6C,0EAYA,WAAiC8H,GAAjC,kFACD9H,EAAO,GACP0H,EAAOJ,IAASM,OAAO,cAC3BE,EAAOA,EAAKC,qBAECJ,KADb3H,EAAOwB,EAAEsG,KACkB9H,GAAQA,EAAK1B,cAAgBoJ,GALnD,gCAMGM,EAAqBF,GANxB,OAOH9H,EAAOwB,EAAEsG,GAPN,gCASE9H,GATF,4C,+BAYe6H,E,sFAAf,WAAyBH,GAAzB,6EACD1H,EAAO,GAEXA,EAAOwB,EAAEkG,GAHJ,iBAKMC,IAAT3H,GACAsH,EAAOI,EAAM,eAAiBJ,EAAO,aAAc,eANhD,iCASGW,EAAsBP,GATzB,eAWSC,IADZ3H,EAAOwB,EAAEkG,IAVN,oBAaDA,EAAOJ,EAAOI,EAAM,cACjBQ,SAAS,EAAG,QACZN,OAAO,mBAEGD,KADb3H,EAAOwB,EAAEkG,IAhBR,kCAmBOO,EAAsBP,GAnB7B,QAoBC1H,EAAOwB,EAAEkG,GApBV,2CAwBQC,IAAT3H,IACFA,EAAO,CAAC0G,MAAO,qCAzBZ,kBA2BE1G,GA3BF,6C,+BA8BeiI,E,sFAAf,WAAqCP,GAArC,oFACDS,EAAY,GADX,SAECV,IACHW,WACCZ,EAAQxB,IAAR,0HACqH0B,EADrH,UAIDW,UANG,+CAMO,WAAOjG,GAAP,gGACF,IAAIL,SAAQ,SAACuG,EAASC,GAC3B,IAAIC,EAAM,GAERA,EADElB,EAAOI,EAAM,eAAiBJ,EAAO,aAAc,cAC/C,CACJvH,QAASqC,EAAK,mBAAqB,GACnChE,MAAOgE,EAAK,mBAAqB,GACjCqG,IAAKrG,EAAI,UAAgB,MACzBsG,IAAKtG,EAAI,WAAiB,MAC1BuG,WAAYvG,EAAK,gBAAkB,GACnCwG,UAAWC,SAASzG,EAAI,YAAkB,EAC1CK,OAAQoG,SAASzG,EAAI,SAAe,EACpCO,UAAWkG,SAASzG,EAAI,YAAkB,GAItC,CACJrC,QAASqC,EAAI,gBAAsB,GACnChE,MAAOgE,EAAI,gBAAsB,GACjCqG,IAAKrG,EAAI,KAAW,MACpBsG,IAAKtG,EAAI,OAAa,MACtBuG,WAAYvG,EAAI,aAAmB,GACnCwG,UAAWC,SAASzG,EAAI,YAAkB,EAC1CK,OAAQoG,SAASzG,EAAI,SAAe,EACpCO,UAAWkG,SAASzG,EAAI,YAAkB,GAG9C+F,EAAUW,KAAKN,GACfF,QA5BO,2CANP,uDAqCHnG,KArCG,+CAqCE,WAAOC,GAAP,kFACA+F,EAAUjJ,OAAS,GADnB,gCAEoB6J,EAAQ,UAAWZ,EAAWT,GAFlD,OAEEnI,EAFF,cAGKiC,EAAEkG,GACTlG,EAAEkG,GAAQnI,EAJR,2CArCF,uDAFD,4C,+BAgDewJ,E,0FAAf,WAAuBC,EAAKC,EAAOvB,GAAnC,mGAGDwB,EAAiB,EACjBC,EAAiB,EACjBC,EAAc,EAEdC,EAAe,EACfC,EAAe,EACfC,EAAY,GARZnH,EAAO,IAUN7C,UATDiK,EAAS,GAWJ1J,EAAI,EAbR,aAaWA,EAAImJ,EAAM/J,QAbrB,iBAcCuK,GAAQ,EACZP,EAAiB,EACjBC,EAAiB,EACjBC,EAAc,EAEdC,GAAgBR,SAASI,EAAMnJ,GAAG8I,WAClCU,GAAgBT,SAASI,EAAMnJ,GAAG6C,WAClC4G,GAAaV,SAASI,EAAMnJ,GAAG2C,QAGtBlB,EAAI,EAxBV,aAwBaA,EAAIiI,EAAOtK,QAxBxB,oBAyBGsK,EAAOjI,GAAGyH,IAAQC,EAAMnJ,GAAGkJ,GAzB9B,wBA0BCE,GAAkBL,SAASI,EAAMnJ,GAAG8I,WACpCY,EAAOjI,GAAGqH,UAAYM,EAAiBL,SAASW,EAAOjI,GAAGqH,WAE1DO,GAAkBN,SAASI,EAAMnJ,GAAG6C,WACpC6G,EAAOjI,GAAGoB,UAAYwG,EAAiBN,SAASW,EAAOjI,GAAGoB,WAE1DyG,GAAeP,SAASI,EAAMnJ,GAAG2C,QACjC+G,EAAOjI,GAAGkB,OAAS2G,EAAcP,SAASW,EAAOjI,GAAGkB,QAEpD+G,EAAOjI,GAAG4G,UAAUW,KAAKG,EAAMnJ,IAC/B2J,GAAQ,EApCT,6BAwBgClI,IAxBhC,wBAyCEkI,IACHP,EAAiB,EACjBC,EAAiB,EACjBC,EAAc,EACVM,EAAQ,CAACvB,UAAW,IAExBe,GAAkBL,SAASI,EAAMnJ,GAAG8I,WACpCc,EAAK,UAAgBR,EAErBC,GAAkBN,SAASI,EAAMnJ,GAAG6C,WACpC+G,EAAK,UAAgBP,EAErBC,GAAeP,SAASI,EAAMnJ,GAAG2C,QACjCiH,EAAK,OAAaN,EAElBM,EAAMV,GAAOC,EAAMnJ,GAAGkJ,GACtBU,EAAK,IAAUT,EAAMnJ,GAAN,IACf4J,EAAK,IAAUT,EAAMnJ,GAAN,IAEf4J,EAAMvB,UAAUW,KAAKG,EAAMnJ,IAC3B0J,EAAOV,KAAKY,IA7DX,QAa6B5J,IAb7B,+BAiELsC,EAAKsF,KAAOA,EACZtF,EAAKwG,UAAYS,EACjBjH,EAAKO,UAAY2G,EACjBlH,EAAKK,OAAS8G,EApET,kBAsEEnH,GAtEF,6C,+BAyEe4F,E,sFAAf,WAAoCF,GAApC,wFACDvI,EAAY,GACZoK,EAAMrC,EAAO,cACbsC,EAAMtC,IAHL,SAKCG,IACHW,WACCZ,EAAQxB,IAAR,4IACuI8B,EADvI,iBAIDO,UANG,+CAMO,WAAOjG,GAAP,gGACF,IAAIL,SAAQ,SAACuG,EAASC,GAQ3B,IAPA,IAAI/C,EAAW,CACbzF,QAASqC,EAAK,mBAAqB,GACnChE,MAAOgE,EAAK,mBAAqB,GACjCqG,IAAKrG,EAAI,KAAW,MACpBsG,IAAKtG,EAAI,MAAY,OAEnByH,EAAQ,GACHC,EAAIxC,EAAOqC,GAAMG,EAAEC,KAAKH,EAAK,SAAW,EAAGE,EAAEE,IAAI,EAAG,QAAS,CACpE,IAAItC,EAAOoC,EAAElC,OAAO,UACpB,QAAkBD,GAAdvF,EAAKsF,GAAoB,CAC3B,IAAIuC,EAAQpB,SAASzG,EAAKsF,KAAU,EAChCwC,GAAO,gBACRJ,EAAElC,OAAO,cAAgBqC,GAE5BJ,EAAMf,KAAKoB,IAIf,GAAIL,EAAM3K,OAAS,EAAG,CACpB,IAAIiL,EAAWN,EAAMA,EAAM3K,OAAS,GACpCsG,EAAS4E,MAAQC,OAAOC,OAAOH,GAAU,GAG3C3E,EAASqE,MAAQA,EACjBtK,EAAUuJ,KAAKtD,GACf8C,QA3BO,2CANP,uDAoCHnG,KApCG,+CAoCE,WAAOC,GAAP,4EACA7C,EAAUL,OAAS,GADnB,gCAEgBqL,EAAmB,UAAWhL,GAF9C,OAEFA,EAFE,cAIKiC,EAAEsG,GACTtG,EAAEsG,GAAQvI,EALR,2CApCF,uDALD,4C,+BAmDegL,E,wFAAf,WAAkCvB,EAAKC,GAAvC,2FAGDuB,EAAa,GAFbC,EAAO,IAINlL,UAHD4I,EAAY,GAKPrI,EAAI,EAPR,YAOWA,EAAImJ,EAAM/J,QAPrB,iBAQCkL,EAAQ,EACRX,GAAQ,EAEHlI,EAAI,EAXV,YAWaA,EAAI4G,EAAUjJ,QAX3B,oBAYGiJ,EAAU5G,GAAGyH,IAAQC,EAAMnJ,GAAGkJ,GAZjC,wBAaCoB,GAASvB,SAASI,EAAMnJ,GAAGsK,QAAU,EACrCjC,EAAU5G,GAAG4G,UAAUW,KAAKG,EAAMnJ,IAClC2J,GAAQ,EAfT,6BAWmClI,IAXnC,uBAoBEkI,KACCC,EAAQ,CAACvB,UAAW,KAClBa,GAAOC,EAAMnJ,GAAGkJ,GACtBU,EAAK,IAAUT,EAAMnJ,GAAN,IACf4J,EAAK,IAAUT,EAAMnJ,GAAN,IACfsK,GAASvB,SAASI,EAAMnJ,GAAN,QAAsB,EACxC4J,EAAMvB,UAAUW,KAAKG,EAAMnJ,IAC3BqI,EAAUW,KAAKY,IAGjBvB,EAAU5G,GAAG6I,MAAQA,EACrBI,GAAcJ,EA/BX,QAO6BtK,IAP7B,8BAkCL2K,EAAKnM,YAAcgJ,IAASM,OAAO,cACnC6C,EAAKL,MAAQI,EAnCR,kBAoCEC,GApCF,6C,4BAsCPxI,K,wRC9QA,SACA,Y,8NAEA,IAoCMyI,EAAyB,CAC7BC,GAAI,gBACJC,KAAM,qBACNC,OAAQ,qBACR,eAAgB,cAChBC,QAAS,iBACTC,MAAO,mBACPC,SAAU,kBACVC,WAAY,kBACZC,UAAW,gBACXC,OAAQ,oBACRC,OAAQ,e,gBAemB,SAACC,GAC5B5J,QAAQC,IAAI,iDAAuC2J,GACnD,IACMC,EAjEiB,SAACC,GACxB,IAAMD,EAAgB,CACpB1L,OAAQ,GACRM,SAAU,IA8BZ,OA3BAqL,EAAcC,SAAQ,SAACC,EAAiBC,GACtC,IAAMC,EAAOF,EAAgBtD,UAAU,GAAG0B,MAAMhK,KAAI,SAACC,EAAG4L,GACtD,IAAItB,EAAQ,EACNiB,EAAOhB,OAAOuB,KAAK9L,GAAG,GAI5B,OAHA2L,EAAgBtD,UAAUqD,SAAQ,SAAChG,GACjC4E,GAAS5E,EAASqE,MAAM6B,GAAOL,MAE1B,CAACQ,EAAGR,EAAMzM,EAAGwL,MAElBkB,EAAc1L,OAAOV,OAAS,IAChCoM,EAAc1L,OAAS+L,EAAK9L,KAAI,SAACC,GAC/B,IAAM0B,EAAI,IAAIsK,KAAKhM,EAAE+L,EAAE7M,QAAQ,KAAM,MAC/B+M,EAAMvK,EAAEwK,UACRC,EAAQzK,EAAE0K,WAAa,EAE7B,MAAM,GAAN,QAAU,IAAAtE,QAAOmE,GAAjB,aAAyB,IAAAnE,QAAOqE,QAGpCX,EAAcpL,SAAS4I,KAAK,CAC1B3I,MAAOsL,EAAgB1L,QACvBM,YAAa8L,SAAOT,GACpBU,MAAM,EACN9L,YAAa,EACbN,KAAM2L,EAAK9L,KAAI,SAACC,GAAD,OAAOA,EAAElB,UAIrB0M,EAgCee,CAhBP,SAAChB,GAAD,OACfA,EAAK9L,UAAUC,MAAK,SAACE,EAAGC,GACtB,IAAI2M,EAAS,EACTC,EAAS,EAQb,OAPA7M,EAAEyI,UAAUqD,SAAQ,SAACgB,GACnBF,GAAUE,EAAEpC,SAEdzK,EAAEwI,UAAUqD,SAAQ,SAACgB,GACnBD,GAAUC,EAAEpC,SAGPmC,EAASD,KAIIG,CAASpB,GAAMlM,MAAM,EAAG,KAG9CZ,YAAUmE,SAAS,CAAC4I,gBAAeD,U,YAEZ,SAAC7J,EAAGD,GAC3B,IAAMhC,EAAYiC,EAAEjC,UACjBM,KAAI,SAACE,GACJ,IAAM2M,E,2WAAU,IACX3M,EADW,CAEd4M,OAAQ5M,EAAQ6I,WAAa7I,EAAQ4C,UAAY5C,EAAQ0C,UAGrDmK,EAAqBrL,EAAEsL,QAAQC,QAAO,SAAChN,GAC3C,IAAMiN,EAAcjN,EAAEkN,OAAOC,aAC7B,OACEF,EAAYhF,gBAAkBhI,EAAQA,QAAQgI,eAC9CgF,IAAgBrC,EAAuB3K,EAAQA,YAInD,IAAK6M,EAAmB1N,OACtB,OAAOwN,EAGT,IAAMQ,EAAoBN,EAAmBpN,MAC3C,SAACE,EAAGC,GAAJ,OAAUA,EAAEqN,OAAOG,KAAOzN,EAAEsN,OAAOG,QACnC,GAEF,IAAKD,IAAsBA,EAAkBF,OAAO/C,MAClD,OAAOyC,EAGTA,EAAWU,WAAaF,EAAkBF,OAAO/C,MACjD,IAAMoD,GACHtN,EAAQ6I,UAAYsE,EAAkBF,OAAO/C,MAC9C,KACAqD,QAAQ,GAMV,OAJID,EAAO,KAAO,SAChBX,EAAWa,WAAaF,GAGnBX,KAERlN,MAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAEiJ,UAAYlJ,EAAEkJ,aAElCxK,UAAMsE,SAAS,CACbpE,YAAa,IAAIwN,KAAKtK,EAAEkG,KAAK1I,QAAQ,KAAM,MAC3CwO,UAAU,IAAAC,kBAAiBjM,EAAEoH,WAC7BW,WAAW,IAAAkE,kBAAiBjM,EAAEiB,QAC9B6G,cAAc,IAAAmE,kBAAiBjM,EAAEmB,WACjCpD,cAEFf,cAAYkE,SAAS,CACnBgL,kBAAmBnO,IAErB,IAAMU,GAAY,IAAA0N,iBAAgBpO,EAAUJ,MAAM,IAClDR,aAAW+D,SAAS,CAClBzC,iB","file":"static/js/main.d927554c.chunk.js","sourcesContent":["import {createState} from 'jstates-react';\n\nconst state = createState({\n  lastUpdated: null,\n});\n\nexport const timeState = createState({});\nexport const searchState = createState({\n  search: '',\n});\nexport const countryState = createState({});\nexport const chartState = createState({});\n\nexport default state;\n","export const white = '#f5f5f5';\nexport const black = '#222222';\n// export const white = '#222222';\n// export const black = '#f5f5f5';\n","import React, {memo} from 'react';\nimport {Text, View} from 'react-native';\nimport {white} from './colors';\n\nexport const chartList = {\n  Cases: 'confirmed',\n  'Active cases': 'active',\n  Recovered: 'recovered',\n  Deaths: 'deaths',\n  'Population infected': 'precentage',\n};\n\nexport const generateBarData = (countries, sort = 'confirmed') => {\n  const top10 = countries.sort((a, b) => b[sort] - a[sort]).slice(0, 9);\n\n  const labels = top10.map((i) => i.country);\n  const data = top10.map((i) => i[sort]);\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Cases per country',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data,\n      },\n    ],\n  };\n\n  return chartData;\n};\n\nexport const format = (i) => (i < 10 ? `0${i}` : i);\nexport const colors = [\n  '#ff0029',\n  '#377eb8',\n  '#7f80cd',\n  '#66a61e',\n  '#984ea3',\n  '#00d2d5',\n  '#ff7f00',\n  '#af8d00',\n  '#b3e900',\n  '#fec254',\n  '#ccebc5',\n  '#a63603',\n  '#016c59',\n  '#e7298a',\n  '#c994c7',\n  '#dfdf00',\n  '#df00df',\n  '#80ff80',\n];\n\nexport const Box = memo(({children, style}) => (\n  <View\n    style={[\n      {\n        width: '90%',\n      },\n      style,\n    ]}>\n    {children}\n  </View>\n));\n\nexport const L = memo(({t}) => (\n  <Text\n    style={{\n      color: '#ddd',\n    }}>\n    {t}\n  </Text>\n));\nexport const V = memo(({t}) => (\n  <Text\n    style={{\n      color: white,\n    }}>\n    {t}\n  </Text>\n));\n\nexport function numberWithCommas(x, shouldRound) {\n  const s = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  if (shouldRound && x > 999) {\n    let decimal = '';\n    if (x < 2000 && s.length > 4 && s.slice(-3) !== '000') {\n      decimal = `.${s.slice(-3)[0]}`;\n    }\n\n    return `${s.slice(0, s.length - 4)}${decimal}K`;\n  }\n  return s;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {getData, getTimeSeriesData} from './jsu';\nimport {parseData, parseTimeData} from './initData';\nimport {countryState} from './state';\n\nconst LSKey = 'd';\n\nlet data = localStorage.getItem(LSKey);\ndata = data && JSON.parse(data);\n\nif (data && data.j && data.d) {\n  console.log('--¯_(ツ)_/¯---------parsing local storage data----------');\n  parseData(data.d, data.j);\n} else if (window.__j__ && window.__d__) {\n  console.log('--¯_(ツ)_/¯---------parsing old data----------');\n  parseData(window.__d__, window.__j__);\n}\n\nPromise.all([\n  getData(),\n  fetch(\n    'https://data.opendatasoft.com/api/records/1.0/search/?dataset=world-population%40kapsarc&rows=10000&sort=year&facet=year&facet=country_name',\n  ).then((j) => j.json()),\n]).then(([d, j]) => {\n  console.log('--¯_(ツ)_/¯-----------d----------', d);\n  console.log('--¯_(ツ)_/¯-----------j----------', j);\n  parseData(d, j);\n  localStorage.setItem(LSKey, JSON.stringify({d, j}));\n});\n\ngetTimeSeriesData('confirmed').then(parseTimeData);\ngetTimeSeriesData('deaths').then((deaths) => {\n  console.log('--¯_(ツ)_/¯-----------deaths----------', deaths);\n  countryState.setState({deaths});\n});\ngetTimeSeriesData('recovered').then((recovered) => {\n  console.log('--¯_(ツ)_/¯-----------recovered----------', recovered);\n  countryState.setState({recovered});\n});\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, {memo, Suspense} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport {white, black} from './colors';\nconst Country = React.lazy(() => import('./components/Country'));\nconst Home = React.lazy(() => import('./components/Home'));\n\nconst App = () => {\n  return (\n    <Router basename=\"/corona\">\n      <ScrollView contentContainerStyle={styles.container}>\n        <View style={styles.container}>\n          <Text\n            accessibilityRole=\"link\"\n            target=\"_blank\"\n            href=\"https://github.com/CSSEGISandData/COVID-19\"\n            style={[\n              styles.title,\n              {\n                color: '#aaa',\n                padding: 10,\n                width: '100%',\n                textAlign: 'center',\n              },\n            ]}>\n            COVID-19 data provided by Johns Hopkins CSSE\n          </Text>\n          <Suspense\n            fallback={\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            }>\n            <Switch>\n              <Route path=\"/country/:country\">\n                <Country />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n              <Redirect to=\"/\" />\n            </Switch>\n          </Suspense>\n        </View>\n      </ScrollView>\n    </Router>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: black,\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const moment = require('moment');\nconst request = require('request');\nconst csv = require('csvtojson');\n\nexport const d = {};\n\nexport async function getData(date) {\n  let data = {};\n  if (date != undefined) {\n    date = moment(date, 'MM-DD-YYYY').format('MM-DD-YYYY');\n    data = await fetchData(date);\n  } else {\n    date = moment().format('MM-DD-YYYY');\n    data = await fetchData(date);\n  }\n  return data;\n}\n\nexport async function getTimeSeriesData(type) {\n  var data = {};\n  let date = moment().format('MM-DD-YYYY');\n  type = type.toLowerCase();\n  data = d[type];\n  if (data === undefined || (data && data.lastUpdated !== date)) {\n    await addRemoteTimesSeries(type);\n    data = d[type];\n  }\n  return data;\n}\n\nexport async function fetchData(date) {\n  var data = {};\n  //console.log(`Fetching data from: ${date}`)\n  data = d[date];\n  while (\n    data === undefined &&\n    moment(date, 'MM-DD-YYYY') >= moment('01-22-2020', 'MM-DD-YYYY')\n  ) {\n    //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from ${date}`)\n    await addRemoteDailyReports(date);\n    data = d[date];\n    if (data == undefined) {\n      //console.log(`REMOTE data from ${date} not found...attempting to fetch LOCAL data from one day before.`)\n      date = moment(date, 'MM-DD-YYYY')\n        .subtract(1, 'days')\n        .format('MM-DD-YYYY');\n      data = d[date];\n      if (data === undefined) {\n        //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from one day before.`)\n        await addRemoteDailyReports(date);\n        data = d[date];\n      }\n    }\n  }\n  if (data === undefined) {\n    data = {error: 'Data not found. Plase try again.'};\n  }\n  return data;\n}\n\nexport async function addRemoteDailyReports(date) {\n  let locations = [];\n  await csv()\n    .fromStream(\n      request.get(\n        `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n      ),\n    )\n    .subscribe(async (json) => {\n      return new Promise((resolve, reject) => {\n        var obj = {};\n        if (moment(date, 'MM-DD-YYYY') <= moment('03-22-2020', 'MM-DD-YYYY')) {\n          obj = {\n            country: json['Country/Region'] || '',\n            state: json['Province/State'] || '',\n            lat: json['Latitude'] || '0.0',\n            lon: json['Longitude'] || '0.0',\n            lastUpdate: json['Last Update'] || '',\n            confirmed: parseInt(json['Confirmed']) || 0,\n            deaths: parseInt(json['Deaths']) || 0,\n            recovered: parseInt(json['Recovered']) || 0,\n          };\n        } else {\n          // console.log('after 03-22-2020');\n          obj = {\n            country: json['Country_Region'] || '',\n            state: json['Province_State'] || '',\n            lat: json['Lat'] || '0.0',\n            lon: json['Long_'] || '0.0',\n            lastUpdate: json['Last_Update'] || '',\n            confirmed: parseInt(json['Confirmed']) || 0,\n            deaths: parseInt(json['Deaths']) || 0,\n            recovered: parseInt(json['Recovered']) || 0,\n          };\n        }\n        locations.push(obj);\n        resolve();\n      });\n    })\n    .then(async (json) => {\n      if (locations.length > 0) {\n        let countries = await groupBy('country', locations, date);\n        delete d[date];\n        d[date] = countries;\n      }\n    });\n}\n\nexport async function groupBy(key, array, date) {\n  var json = {};\n  var result = [];\n  var totalConfirmed = 0;\n  var totalRecovered = 0;\n  var totalDeaths = 0;\n\n  var allConfirmed = 0;\n  var allRecovered = 0;\n  var allDeaths = 0;\n\n  json.countries = result;\n\n  for (var i = 0; i < array.length; i++) {\n    var added = false;\n    totalConfirmed = 0;\n    totalRecovered = 0;\n    totalDeaths = 0;\n\n    allConfirmed += parseInt(array[i].confirmed);\n    allRecovered += parseInt(array[i].recovered);\n    allDeaths += parseInt(array[i].deaths);\n\n    // adds the reset of the locations for the country\n    for (var j = 0; j < result.length; j++) {\n      if (result[j][key] == array[i][key]) {\n        totalConfirmed += parseInt(array[i].confirmed);\n        result[j].confirmed = totalConfirmed + parseInt(result[j].confirmed);\n\n        totalRecovered += parseInt(array[i].recovered);\n        result[j].recovered = totalRecovered + parseInt(result[j].recovered);\n\n        totalDeaths += parseInt(array[i].deaths);\n        result[j].deaths = totalDeaths + parseInt(result[j].deaths);\n\n        result[j].locations.push(array[i]);\n        added = true;\n        break;\n      }\n    }\n    // adds the first location for the country\n    if (!added) {\n      totalConfirmed = 0;\n      totalRecovered = 0;\n      totalDeaths = 0;\n      var entry = {locations: []};\n\n      totalConfirmed += parseInt(array[i].confirmed);\n      entry['confirmed'] = totalConfirmed;\n\n      totalRecovered += parseInt(array[i].recovered);\n      entry['recovered'] = totalRecovered;\n\n      totalDeaths += parseInt(array[i].deaths);\n      entry['deaths'] = totalDeaths;\n\n      entry[key] = array[i][key];\n      entry['lat'] = array[i]['lat'];\n      entry['lon'] = array[i]['lon'];\n\n      entry.locations.push(array[i]);\n      result.push(entry);\n    }\n  }\n\n  json.date = date;\n  json.confirmed = allConfirmed;\n  json.recovered = allRecovered;\n  json.deaths = allDeaths;\n\n  return json;\n}\n\nexport async function addRemoteTimesSeries(type) {\n  var countries = [];\n  let min = moment('2020-03-11');\n  let max = moment();\n  //let initCapType = type.charAt(0).toUpperCase() + type.slice(1)\n  await csv()\n    .fromStream(\n      request.get(\n        `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${type}_global.csv`,\n      ),\n    )\n    .subscribe(async (json) => {\n      return new Promise((resolve, reject) => {\n        var location = {\n          country: json['Country/Region'] || '',\n          state: json['Province/State'] || '',\n          lat: json['Lat'] || '0.0',\n          lon: json['Long'] || '0.0',\n        };\n        let dates = [];\n        for (var m = moment(min); m.diff(max, 'days') <= 0; m.add(1, 'days')) {\n          let date = m.format('M/D/YY');\n          if (json[date] != undefined) {\n            let value = parseInt(json[date]) || 0;\n            let dateObj = {\n              [m.format('MM-DD-YYYY')]: value,\n            };\n            dates.push(dateObj);\n          }\n        }\n\n        if (dates.length > 0) {\n          let lastDate = dates[dates.length - 1];\n          location.total = Object.values(lastDate)[0];\n        }\n\n        location.dates = dates;\n        countries.push(location);\n        resolve();\n      });\n    })\n    .then(async (json) => {\n      if (countries.length > 0) {\n        countries = await groupByTimesSeries('country', countries);\n\n        delete d[type];\n        d[type] = countries;\n      }\n    });\n}\n\nexport async function groupByTimesSeries(key, array) {\n  let root = {};\n  var locations = [];\n  var grandTotal = 0;\n\n  root.countries = locations;\n\n  for (var i = 0; i < array.length; i++) {\n    var total = 0;\n    var added = false;\n    // adds the reset of the locations for the country\n    for (var j = 0; j < locations.length; j++) {\n      if (locations[j][key] == array[i][key]) {\n        total += parseInt(array[i].total) || 0;\n        locations[j].locations.push(array[i]);\n        added = true;\n        break;\n      }\n    }\n    // adds the first location for the country\n    if (!added) {\n      var entry = {locations: []};\n      entry[key] = array[i][key];\n      entry['lat'] = array[i]['lat'];\n      entry['lon'] = array[i]['lon'];\n      total += parseInt(array[i]['total']) || 0;\n      entry.locations.push(array[i]);\n      locations.push(entry);\n    }\n\n    locations[j].total = total;\n    grandTotal += total;\n  }\n\n  root.lastUpdated = moment().format('MM-DD-YYYY');\n  root.total = grandTotal;\n  return root;\n}\ngetData();\n","import {generateBarData, numberWithCommas, colors, format} from './utils';\nimport state, {timeState, searchState, chartState} from './state';\n\nconst getLineChartData = (timeCountries) => {\n  const lineChartData = {\n    labels: [],\n    datasets: [],\n  };\n\n  timeCountries.forEach((countryTimeData, index) => {\n    const sets = countryTimeData.locations[0].dates.map((i, index) => {\n      let total = 0;\n      const time = Object.keys(i)[0];\n      countryTimeData.locations.forEach((location) => {\n        total += location.dates[index][time];\n      });\n      return {y: time, x: total};\n    });\n    if (lineChartData.labels.length < 1) {\n      lineChartData.labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n    }\n    lineChartData.datasets.push({\n      label: countryTimeData.country,\n      borderColor: colors[index],\n      fill: false,\n      borderWidth: 1,\n      data: sets.map((i) => i.x),\n    });\n  });\n\n  return lineChartData;\n};\n\nconst countryNamesExceptions = {\n  US: 'United States',\n  Iran: 'Iran, Islamic Rep.',\n  Russia: 'Russian Federation',\n  'Korea, South': 'Korea, Rep.',\n  Czechia: 'Czech Republic',\n  Egypt: 'Egypt, Arab Rep.',\n  Slovakia: 'Slovak Republic',\n  Kyrgyzstan: 'Kyrgyz Republic',\n  Venezuela: 'Venezuela, RB',\n  Brunei: 'Brunei Darussalam',\n  Gambia: 'Gambia, The',\n};\nconst sortTime = (time) =>\n  time.countries.sort((a, b) => {\n    let aTotal = 0;\n    let bTotal = 0;\n    a.locations.forEach((l) => {\n      aTotal += l.total;\n    });\n    b.locations.forEach((l) => {\n      bTotal += l.total;\n    });\n\n    return bTotal - aTotal;\n  });\nexport const parseTimeData = (time) => {\n  console.log('--¯_(ツ)_/¯-----------time----------', time);\n  const timeCountries = sortTime(time).slice(0, 10);\n  const lineChartData = getLineChartData(timeCountries);\n\n  timeState.setState({lineChartData, time});\n};\nexport const parseData = (d, j) => {\n  const countries = d.countries\n    .map((country) => {\n      const newCountry = {\n        ...country,\n        active: country.confirmed - (country.recovered + country.deaths),\n      };\n\n      const countryPopulations = j.records.filter((i) => {\n        const countryName = i.fields.country_name;\n        return (\n          countryName.toLowerCase() === country.country.toLowerCase() ||\n          countryName === countryNamesExceptions[country.country]\n        );\n      });\n\n      if (!countryPopulations.length) {\n        return newCountry;\n      }\n\n      const countryPopulation = countryPopulations.sort(\n        (a, b) => b.fields.year - a.fields.year,\n      )[0];\n\n      if (!countryPopulation || !countryPopulation.fields.value) {\n        return newCountry;\n      }\n\n      newCountry.population = countryPopulation.fields.value;\n      const perc = (\n        (country.confirmed / countryPopulation.fields.value) *\n        100\n      ).toFixed(2);\n\n      if (perc + '' !== '0.00') {\n        newCountry.precentage = perc;\n      }\n\n      return newCountry;\n    })\n    .sort((a, b) => b.confirmed - a.confirmed);\n\n  state.setState({\n    lastUpdated: new Date(d.date.replace(/-/g, '/')),\n    allCases: numberWithCommas(d.confirmed),\n    allDeaths: numberWithCommas(d.deaths),\n    allRecovered: numberWithCommas(d.recovered),\n    countries,\n  });\n  searchState.setState({\n    filteredCountries: countries,\n  });\n  const chartData = generateBarData(countries.slice(0));\n  chartState.setState({\n    chartData,\n  });\n};\n"],"sourceRoot":""}