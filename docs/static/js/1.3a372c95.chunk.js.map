{"version":3,"sources":["components/Chart.js"],"names":["LineChart","memo","data","legend","options","title","display","text","datasets","label","fontSize","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","callback","value","index","values","numberWithCommas","position","labels","fontColor","boxWidth","padding","View","style","marginTop","height","width","Line","BarChart","c","colors","backgroundColor","hoverBackgroundColor","Bar","PieChart","Pie","props"],"mappings":"qMAAA,cACA,SACA,SACA,SAEaA,GAAY,IAAAC,OAAK,YAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,OAC9BC,EAAU,CACdC,MAAO,CACLC,UAHmD,EAAXD,MAIxCE,KAAML,EAAKM,SAAS,GAAGC,MACvBC,SAAU,IAEZC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,EACbC,SAAU,SAAUC,EAAOC,EAAOC,GAChC,OAAO,IAAAC,kBAAiBH,GAAO,QAMzCf,OAAQ,CACNG,UAAWH,EACXmB,SAAU,SACVC,OAAQ,CACNC,UAAW,QACXC,SAAU,GACVC,QAAS,MAIf,OACE,wBAAC,EAAAC,KAAD,CACEC,MAAO,CAACC,UAAW,GAAIC,OAAQ,IAAKC,MAAO,OAAQT,SAAU,aAC7D,wBAAC,EAAAU,KAAD,CAAM9B,KAAMA,EAAME,QAASA,Q,cAI1B,IAAM6B,GAAW,IAAAhC,OAAK,YAA+B,IAA7BC,EAA4B,EAA5BA,KAAcgC,EAAc,EAAtBC,OAAW9B,EAAW,EAAXA,MAG9C,OAFAH,EAAKM,SAAS,GAAG4B,gBAAkBF,GAAKC,SACxCjC,EAAKM,SAAS,GAAG6B,qBAAuBH,GAAKC,SAE3C,wBAAC,EAAAR,KAAD,CACEC,MAAO,CACLC,UAAW,GACXC,OAAQ,OACRC,MAAO,OACPT,SAAU,aAEZ,wBAAC,EAAAgB,IAAD,CACEpC,KAAMA,EACNE,QAAS,CACPO,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,EACbC,SAAU,SAAUC,EAAOC,EAAOC,GAChC,OAAO,IAAAC,kBAAiBH,GAAO,QAMzCb,MAAO,CACLC,UAAWD,EACXE,KAAML,EAAKM,SAAS,GAAGC,MACvBC,SAAU,IAEZP,OAAQ,CACNG,SAAS,EACTgB,SAAU,gB,aAQf,IAAMiB,GAAW,IAAAtC,OAAK,YAAa,IAAXC,EAAU,EAAVA,KAG7B,OAFAA,EAAKM,SAAS,GAAG4B,gBAAkBD,SACnCjC,EAAKM,SAAS,GAAG6B,qBAAuBF,SAEtC,wBAAC,EAAAR,KAAD,CAAMC,MAAO,CAACG,MAAO,SACnB,wBAAC,EAAAS,IAAD,CACEtC,KAAMA,EACNE,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAML,EAAKM,SAAS,GAAGC,MACvBC,SAAU,IAEZP,OAAQ,CACNG,SAAS,U,aA0BrB,I,EAAc,SAACmC,GACb,OACE,gDACE,wBAACR,EAAaQ,K","file":"static/js/1.3a372c95.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\nimport {numberWithCommas, colors} from '../utils';\n\nexport const LineChart = memo(({data, legend, title}) => {\n  const options = {\n    title: {\n      display: !!title,\n      text: data.datasets[0].label,\n      fontSize: 20,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return numberWithCommas(value, true);\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: !!legend,\n      position: 'bottom',\n      labels: {\n        fontColor: 'white',\n        boxWidth: 20,\n        padding: 20,\n      },\n    },\n  };\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line data={data} options={options} />\n    </View>\n  );\n});\nexport const BarChart = memo(({data, colors: c, title}) => {\n  data.datasets[0].backgroundColor = c || colors;\n  data.datasets[0].hoverBackgroundColor = c || colors;\n  return (\n    <View\n      style={{\n        marginTop: 20,\n        height: '40vh',\n        width: '100%',\n        position: 'relative',\n      }}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true,\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value, true);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: !!title,\n            text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n});\n\nexport const PieChart = memo(({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors;\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/*\n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n});\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      {/* <PieChart {...props} /> */}\n    </>\n  );\n};\nexport default Chart;\n"],"sourceRoot":""}