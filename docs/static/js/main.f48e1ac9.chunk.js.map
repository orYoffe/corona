{"version":3,"sources":["utils.js","state.js","index.js","App.js","serviceWorker.js","jsu.js"],"names":["x","shouldRound","s","toString","replace","decimal","length","slice","Cases","Recovered","Deaths","countries","sort","top10","a","b","labels","map","i","country","data","chartData","datasets","label","backgroundColor","borderColor","borderWidth","Box","memo","children","style","View","margin","padding","width","L","t","Text","color","V","createState","lastUpdated","search","countryNamesExceptions","US","Iran","Russia","Czechia","Egypt","Slovakia","Kyrgyzstan","Venezuela","Brunei","Gambia","parseData","d","j","newCountry","active","confirmed","recovered","deaths","countryPopulations","records","filter","countryName","fields","country_name","toLowerCase","countryPopulation","year","value","population","perc","toFixed","precentage","state","setState","Date","date","allCases","numberWithCommas","allDeaths","allRecovered","filteredCountries","generateBarData","Promise","all","getData","fetch","then","json","console","log","getTimeSeriesData","time","lineChartData","timeCountries","forEach","countryTimeData","index","sets","locations","dates","total","Object","keys","location","y","day","getDate","month","getMonth","format","push","colors","fill","getLineChartData","aTotal","bTotal","l","sortTime","ReactDOM","render","document","getElementById","serviceWorker","register","Country","React","lazy","Home","styles","StyleSheet","create","container","alignItems","minHeight","title","fontWeight","fontSize","basename","ScrollView","contentContainerStyle","accessibilityRole","target","href","textAlign","Suspense","fallback","ActivityIndicator","size","marginTop","alignSelf","Switch","Route","path","Redirect","to","config","navigator","URL","process","window","origin","addEventListener","swUrl","isLocalhost","headers","response","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","error","message","Boolean","hostname","match","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","moment","require","request","csv","undefined","fetchData","type","addRemoteTimesSeries","addRemoteDailyReports","subtract","fromStream","subscribe","resolve","reject","obj","lat","lon","lastUpdate","parseInt","groupBy","key","array","totalConfirmed","totalRecovered","totalDeaths","allConfirmed","result","added","entry","min","max","m","diff","add","dateObj","lastDate","values","groupByTimesSeries","grandTotal","root"],"mappings":"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","file":"static/js/main.f48e1ac9.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {Text, View} from 'react-native';\n\nexport const chartList = {\n  Cases: 'confirmed',\n  'Active cases': 'active',\n  Recovered: 'recovered',\n  Deaths: 'deaths',\n  'Population infected': 'precentage',\n};\n\nexport const generateBarData = (countries, sort = 'confirmed') => {\n  const top10 = countries.sort((a, b) => b[sort] - a[sort]).slice(0, 9);\n\n  const labels = top10.map((i) => i.country);\n  const data = top10.map((i) => i[sort]);\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Cases per country',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data,\n      },\n    ],\n  };\n\n  return chartData;\n};\n\nexport const format = (i) => (i < 10 ? `0${i}` : i);\nexport const colors = [\n  '#ff0029',\n  '#377eb8',\n  '#7f80cd',\n  '#66a61e',\n  '#984ea3',\n  '#00d2d5',\n  '#ff7f00',\n  '#af8d00',\n  '#b3e900',\n  '#fec254',\n  '#ccebc5',\n  '#a63603',\n  '#016c59',\n  '#e7298a',\n  '#c994c7',\n  '#dfdf00',\n  '#df00df',\n  '#80ff80',\n];\n\nexport const Box = memo(({children, style}) => (\n  <View\n    style={[\n      {\n        margin: 10,\n        padding: 10,\n        width: '80%',\n      },\n      style,\n    ]}>\n    {children}\n  </View>\n));\n\nexport const L = memo(({t}) => (\n  <Text\n    style={{\n      color: '#ddd',\n    }}>\n    {t}\n  </Text>\n));\nexport const V = memo(({t}) => (\n  <Text\n    style={{\n      color: '#fff',\n    }}>\n    {t}\n  </Text>\n));\n\nexport function numberWithCommas(x, shouldRound) {\n  const s = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  if (shouldRound && x > 999) {\n    let decimal = '';\n    if (x < 2000 && s.length > 4 && s.slice(-3) !== '000') {\n      decimal = `.${s.slice(-3)[0]}`;\n    }\n\n    return `${s.slice(0, s.length - 4)}${decimal}K`;\n  }\n  return s;\n}\n","import {createState} from 'jstates-react';\n\nconst state = createState({\n  lastUpdated: null,\n  search: '',\n});\n\nexport default state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {generateBarData, numberWithCommas, colors, format} from './utils';\nimport state from './state';\nimport {getData, getTimeSeriesData} from './jsu';\n\nconst getLineChartData = (timeCountries) => {\n  const lineChartData = {\n    labels: [],\n    datasets: [],\n  };\n\n  timeCountries.forEach((countryTimeData, index) => {\n    const sets = countryTimeData.locations[0].dates.map((i, index) => {\n      let total = 0;\n      const time = Object.keys(i)[0];\n      countryTimeData.locations.forEach((location) => {\n        total += location.dates[index][time];\n      });\n      return {y: time, x: total};\n    });\n    if (lineChartData.labels.length < 1) {\n      lineChartData.labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n    }\n    lineChartData.datasets.push({\n      label: countryTimeData.country,\n      borderColor: colors[index],\n      fill: false,\n      borderWidth: 1,\n      data: sets.map((i) => i.x),\n    });\n  });\n\n  return lineChartData;\n};\n\nconst countryNamesExceptions = {\n  US: 'United States',\n  Iran: 'Iran, Islamic Rep.',\n  Russia: 'Russian Federation',\n  'Korea, South': 'Korea, Rep.',\n  Czechia: 'Czech Republic',\n  Egypt: 'Egypt, Arab Rep.',\n  Slovakia: 'Slovak Republic',\n  Kyrgyzstan: 'Kyrgyz Republic',\n  Venezuela: 'Venezuela, RB',\n  Brunei: 'Brunei Darussalam',\n  Gambia: 'Gambia, The',\n};\nconst sortTime = (time) =>\n  time.countries.sort((a, b) => {\n    let aTotal = 0;\n    let bTotal = 0;\n    a.locations.forEach((l) => {\n      aTotal += l.total;\n    });\n    b.locations.forEach((l) => {\n      bTotal += l.total;\n    });\n\n    return bTotal - aTotal;\n  });\nconst parseTimeData = (time) => {\n  console.log('--¯_(ツ)_/¯-----------time----------', time);\n  const timeCountries = sortTime(time).slice(0, 10);\n  const lineChartData = getLineChartData(timeCountries);\n\n  state.setState({lineChartData, time});\n};\nconst parseData = (d, j) => {\n  const countries = d.countries\n    .map((country) => {\n      const newCountry = {\n        ...country,\n        active: country.confirmed - (country.recovered + country.deaths),\n      };\n\n      const countryPopulations = j.records.filter((i) => {\n        const countryName = i.fields.country_name;\n        return (\n          countryName.toLowerCase() === country.country.toLowerCase() ||\n          countryName === countryNamesExceptions[country.country]\n        );\n      });\n\n      if (!countryPopulations.length) {\n        return newCountry;\n      }\n\n      const countryPopulation = countryPopulations.sort(\n        (a, b) => b.fields.year - a.fields.year,\n      )[0];\n\n      if (!countryPopulation || !countryPopulation.fields.value) {\n        return newCountry;\n      }\n\n      newCountry.population = countryPopulation.fields.value;\n      const perc = (\n        (country.confirmed / countryPopulation.fields.value) *\n        100\n      ).toFixed(2);\n\n      if (perc + '' !== '0.00') {\n        newCountry.precentage = perc;\n      }\n\n      return newCountry;\n    })\n    .sort((a, b) => b.confirmed - a.confirmed);\n\n  state.setState({\n    lastUpdated: new Date(d.date.replace(/-/g, '/')),\n    allCases: numberWithCommas(d.confirmed),\n    allDeaths: numberWithCommas(d.deaths),\n    allRecovered: numberWithCommas(d.recovered),\n    countries,\n    filteredCountries: countries,\n  });\n  const chartData = generateBarData(countries.slice(0));\n  state.setState({\n    chartData,\n  });\n};\n\nPromise.all([\n  getData(),\n  fetch(\n    'https://data.opendatasoft.com/api/records/1.0/search/?dataset=world-population%40kapsarc&rows=10000&sort=year&facet=year&facet=country_name',\n  ).then((j) => j.json()),\n]).then(([d, j]) => {\n  console.log('--¯_(ツ)_/¯-----------d----------', d);\n  console.log('--¯_(ツ)_/¯-----------j----------', j);\n  parseData(d, j);\n});\n\ngetTimeSeriesData('confirmed').then(parseTimeData);\ngetTimeSeriesData('deaths').then((deaths) => {\n  console.log('--¯_(ツ)_/¯-----------deaths----------', deaths);\n  state.setState({deaths});\n});\ngetTimeSeriesData('recovered').then((recovered) => {\n  console.log('--¯_(ツ)_/¯-----------recovered----------', recovered);\n  state.setState({recovered});\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, {memo, Suspense} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nconst Country = React.lazy(() => import('./Country'));\nconst Home = React.lazy(() => import('./Home'));\n\nconst App = () => {\n  return (\n    <Router basename=\"/corona\">\n      <ScrollView contentContainerStyle={styles.container}>\n        <View style={styles.container}>\n          <Text\n            accessibilityRole=\"link\"\n            target=\"_blank\"\n            href=\"https://github.com/CSSEGISandData/COVID-19\"\n            style={[\n              styles.title,\n              {\n                color: '#aaa',\n                padding: 10,\n                width: '100%',\n                textAlign: 'center',\n              },\n            ]}>\n            COVID-19 data provided by Johns Hopkins CSSE\n          </Text>\n          <Suspense\n            fallback={\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            }>\n            <Switch>\n              <Route path=\"/country/:country\">\n                <Country />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n              <Redirect to=\"/\" />\n            </Switch>\n          </Suspense>\n        </View>\n      </ScrollView>\n    </Router>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#222222',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const moment = require('moment');\nconst request = require('request');\nconst csv = require('csvtojson');\n\nexport const d = {};\n\nexport async function getData(date) {\n  let data = {};\n  if (date != undefined) {\n    date = moment(date, 'MM-DD-YYYY').format('MM-DD-YYYY');\n    data = await fetchData(date);\n  } else {\n    date = moment().format('MM-DD-YYYY');\n    data = await fetchData(date);\n  }\n  return data;\n}\n\nexport async function getTimeSeriesData(type) {\n  var data = {};\n  let date = moment().format('MM-DD-YYYY');\n  type = type.toLowerCase();\n  data = d[type];\n  if (data === undefined || (data && data.lastUpdated !== date)) {\n    await addRemoteTimesSeries(type);\n    data = d[type];\n  }\n  return data;\n}\n\nexport async function fetchData(date) {\n  var data = {};\n  //console.log(`Fetching data from: ${date}`)\n  data = d[date];\n  while (\n    data === undefined &&\n    moment(date, 'MM-DD-YYYY') >= moment('01-22-2020', 'MM-DD-YYYY')\n  ) {\n    //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from ${date}`)\n    await addRemoteDailyReports(date);\n    data = d[date];\n    if (data == undefined) {\n      //console.log(`REMOTE data from ${date} not found...attempting to fetch LOCAL data from one day before.`)\n      date = moment(date, 'MM-DD-YYYY')\n        .subtract(1, 'days')\n        .format('MM-DD-YYYY');\n      data = d[date];\n      if (data === undefined) {\n        //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from one day before.`)\n        await addRemoteDailyReports(date);\n        data = d[date];\n      }\n    }\n  }\n  if (data === undefined) {\n    data = {error: 'Data not found. Plase try again.'};\n  }\n  return data;\n}\n\nexport async function addRemoteDailyReports(date) {\n  let locations = [];\n  await csv()\n    .fromStream(\n      request.get(\n        `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n      ),\n    )\n    .subscribe(async (json) => {\n      return new Promise((resolve, reject) => {\n        var obj = {};\n        if (moment(date, 'MM-DD-YYYY') <= moment('03-22-2020', 'MM-DD-YYYY')) {\n          obj = {\n            country: json['Country/Region'] || '',\n            state: json['Province/State'] || '',\n            lat: json['Latitude'] || '0.0',\n            lon: json['Longitude'] || '0.0',\n            lastUpdate: json['Last Update'] || '',\n            confirmed: parseInt(json['Confirmed']) || 0,\n            deaths: parseInt(json['Deaths']) || 0,\n            recovered: parseInt(json['Recovered']) || 0,\n          };\n        } else {\n          // console.log('after 03-22-2020');\n          obj = {\n            country: json['Country_Region'] || '',\n            state: json['Province_State'] || '',\n            lat: json['Lat'] || '0.0',\n            lon: json['Long_'] || '0.0',\n            lastUpdate: json['Last_Update'] || '',\n            confirmed: parseInt(json['Confirmed']) || 0,\n            deaths: parseInt(json['Deaths']) || 0,\n            recovered: parseInt(json['Recovered']) || 0,\n          };\n        }\n        locations.push(obj);\n        resolve();\n      });\n    })\n    .then(async (json) => {\n      if (locations.length > 0) {\n        let countries = await groupBy('country', locations, date);\n        delete d[date];\n        d[date] = countries;\n      }\n    });\n}\n\nexport async function groupBy(key, array, date) {\n  var json = {};\n  var result = [];\n  var totalConfirmed = 0;\n  var totalRecovered = 0;\n  var totalDeaths = 0;\n\n  var allConfirmed = 0;\n  var allRecovered = 0;\n  var allDeaths = 0;\n\n  json.countries = result;\n\n  for (var i = 0; i < array.length; i++) {\n    var added = false;\n    totalConfirmed = 0;\n    totalRecovered = 0;\n    totalDeaths = 0;\n\n    allConfirmed += parseInt(array[i].confirmed);\n    allRecovered += parseInt(array[i].recovered);\n    allDeaths += parseInt(array[i].deaths);\n\n    // adds the reset of the locations for the country\n    for (var j = 0; j < result.length; j++) {\n      if (result[j][key] == array[i][key]) {\n        totalConfirmed += parseInt(array[i].confirmed);\n        result[j].confirmed = totalConfirmed + parseInt(result[j].confirmed);\n\n        totalRecovered += parseInt(array[i].recovered);\n        result[j].recovered = totalRecovered + parseInt(result[j].recovered);\n\n        totalDeaths += parseInt(array[i].deaths);\n        result[j].deaths = totalDeaths + parseInt(result[j].deaths);\n\n        result[j].locations.push(array[i]);\n        added = true;\n        break;\n      }\n    }\n    // adds the first location for the country\n    if (!added) {\n      totalConfirmed = 0;\n      totalRecovered = 0;\n      totalDeaths = 0;\n      var entry = {locations: []};\n\n      totalConfirmed += parseInt(array[i].confirmed);\n      entry['confirmed'] = totalConfirmed;\n\n      totalRecovered += parseInt(array[i].recovered);\n      entry['recovered'] = totalRecovered;\n\n      totalDeaths += parseInt(array[i].deaths);\n      entry['deaths'] = totalDeaths;\n\n      entry[key] = array[i][key];\n      entry['lat'] = array[i]['lat'];\n      entry['lon'] = array[i]['lon'];\n\n      entry.locations.push(array[i]);\n      result.push(entry);\n    }\n  }\n\n  json.date = date;\n  json.confirmed = allConfirmed;\n  json.recovered = allRecovered;\n  json.deaths = allDeaths;\n\n  return json;\n}\n\nexport async function addRemoteTimesSeries(type) {\n  var countries = [];\n  let min = moment('2020-03-11');\n  let max = moment();\n  //let initCapType = type.charAt(0).toUpperCase() + type.slice(1)\n  await csv()\n    .fromStream(\n      request.get(\n        `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${type}_global.csv`,\n      ),\n    )\n    .subscribe(async (json) => {\n      return new Promise((resolve, reject) => {\n        var location = {\n          country: json['Country/Region'] || '',\n          state: json['Province/State'] || '',\n          lat: json['Lat'] || '0.0',\n          lon: json['Long'] || '0.0',\n        };\n        let dates = [];\n        for (var m = moment(min); m.diff(max, 'days') <= 0; m.add(1, 'days')) {\n          let date = m.format('M/D/YY');\n          if (json[date] != undefined) {\n            let value = parseInt(json[date]) || 0;\n            let dateObj = {\n              [m.format('MM-DD-YYYY')]: value,\n            };\n            dates.push(dateObj);\n          }\n        }\n\n        if (dates.length > 0) {\n          let lastDate = dates[dates.length - 1];\n          location.total = Object.values(lastDate)[0];\n        }\n\n        location.dates = dates;\n        countries.push(location);\n        resolve();\n      });\n    })\n    .then(async (json) => {\n      if (countries.length > 0) {\n        countries = await groupByTimesSeries('country', countries);\n\n        delete d[type];\n        d[type] = countries;\n      }\n    });\n}\n\nexport async function groupByTimesSeries(key, array) {\n  let root = {};\n  var locations = [];\n  var grandTotal = 0;\n\n  root.countries = locations;\n\n  for (var i = 0; i < array.length; i++) {\n    var total = 0;\n    var added = false;\n    // adds the reset of the locations for the country\n    for (var j = 0; j < locations.length; j++) {\n      if (locations[j][key] == array[i][key]) {\n        total += parseInt(array[i].total) || 0;\n        locations[j].locations.push(array[i]);\n        added = true;\n        break;\n      }\n    }\n    // adds the first location for the country\n    if (!added) {\n      var entry = {locations: []};\n      entry[key] = array[i][key];\n      entry['lat'] = array[i]['lat'];\n      entry['lon'] = array[i]['lon'];\n      total += parseInt(array[i]['total']) || 0;\n      entry.locations.push(array[i]);\n      locations.push(entry);\n    }\n\n    locations[j].total = total;\n    grandTotal += total;\n  }\n\n  root.lastUpdated = moment().format('MM-DD-YYYY');\n  root.total = grandTotal;\n  return root;\n}\ngetData();\n"],"sourceRoot":""}