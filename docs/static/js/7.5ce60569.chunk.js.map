{"version":3,"sources":["Home.js","DropDown.js"],"names":["Map","React","lazy","Chart","LineChart","then","module","default","updateSearch","search","state","setState","currentState","getState","length","filteredCountries","countries","filter","i","country","toLowerCase","includes","sortBy","sortCountries","setNewChartData","sort","chartData","generateBarData","slice","chartList","value","property","a","b","styles","StyleSheet","create","container","alignItems","width","title","color","fontWeight","fontSize","text","marginBottom","justifyContent","borderBottomColor","borderBottomStyle","borderBottomWidth","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","subscribe","memo","lastUpdated","lineChartData","allCases","allDeaths","allRecovered","View","style","Suspense","fallback","Box","Text","key","L","t","V","toDateString","flexDirection","options","onSelect","label","ActivityIndicator","size","marginTop","alignSelf","data","legend","TextInput","borderColor","borderWidth","paddingLeft","paddingRight","placeholder","onChangeText","map","index","confirmed","deaths","recovered","population","precentage","active","Link","to","numberWithCommas","lineHeight","textAlign","labelStyle","className","onChange","e","currentTarget","Object","keys"],"mappings":"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","file":"static/js/7.5ce60569.chunk.js","sourcesContent":["import React, {memo, Suspense} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TextInput,\n} from 'react-native';\nimport {subscribe} from 'jstates-react';\nimport {Link} from 'react-router-dom';\n// import Chart, {LineChart} from './Chart';\nimport state from './state';\nimport DropDown from './DropDown';\nimport {chartList, generateBarData, numberWithCommas, Box, L, V} from './utils';\nconst Map = React.lazy(() => import('./Map'));\nconst Chart = React.lazy(() => import('./Chart'));\nconst LineChart = React.lazy(() =>\n  import('./Chart').then((module) => ({\n    default: module.LineChart,\n  })),\n);\n\nconst updateSearch = (search = '') => {\n  state.setState({search});\n  const currentState = state.getState();\n  if (search.length) {\n    let filteredCountries = currentState.countries.filter((i) =>\n      i.country.toLowerCase().includes(search.toLowerCase()),\n    );\n\n    state.setState({filteredCountries}, () => {\n      if (currentState.sortBy) {\n        sortCountries(currentState.sortBy);\n      }\n    });\n  } else {\n    state.setState({filteredCountries: currentState.countries});\n  }\n};\n\nconst setNewChartData = (sort = 'confirmed') => {\n  const chartData = generateBarData(\n    state.getState().countries.slice(0),\n    chartList[sort],\n  );\n\n  state.setState({chartData});\n};\n\nconst sortCountries = (value) => {\n  let property = chartList[value];\n  const filteredCountries = state\n    .getState()\n    .filteredCountries.slice()\n    .sort((a, b) => b[property] - a[property]);\n  state.setState({filteredCountries, sortBy: value});\n};\n\nconst Home = ({\n  lastUpdated,\n  lineChartData,\n  allCases,\n  allDeaths,\n  allRecovered,\n  filteredCountries,\n  search,\n  chartData,\n}) => {\n  return (\n    <View style={styles.container}>\n      <Suspense fallback=\"\">\n        <Map />\n      </Suspense>\n      {lastUpdated && (\n        <Box\n          style={{\n            borderBottomColor: '#fff',\n            borderBottomStyle: 'solid',\n            borderBottomWidth: 1,\n          }}>\n          <Text style={[styles.title, styles.text]}>Worldwide</Text>\n          <Text key={`Total cases: ${allCases}`} style={styles.text}>\n            <L t=\"Total cases: \" />\n            <V t={allCases} />\n          </Text>\n          <Text key={`Total deaths: ${allDeaths}`} style={styles.text}>\n            <L t=\"Total deaths: \" />\n            <V t={allDeaths} />\n          </Text>\n          <Text key={`Total recovered: ${allRecovered}`} style={styles.text}>\n            <L t=\"Total recovered: \" />\n            <V t={allRecovered} />\n          </Text>\n          <Text\n            key={`updated on: ${lastUpdated.toDateString()}`}\n            style={styles.text}>\n            <L t=\"Updated on: \" />\n            <V t={lastUpdated.toDateString()} />\n          </Text>\n        </Box>\n      )}\n      <View\n        style={{\n          width: '80%',\n          marginBottom: 20,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n        <DropDown\n          options={chartList}\n          onSelect={setNewChartData}\n          label=\"Select chart data\"\n        />\n\n        {chartData && (\n          <Suspense\n            fallback={\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            }>\n            <Chart data={chartData} />\n          </Suspense>\n        )}\n        {lineChartData && (\n          <Suspense fallback=\"\">\n            <LineChart data={lineChartData} legend />\n          </Suspense>\n        )}\n      </View>\n      <TextInput\n        style={{\n          height: 40,\n          borderColor: 'gray',\n          borderWidth: 1,\n          backgroundColor: '#ccc',\n          width: '80%',\n          borderRadius: 3,\n          paddingLeft: 8,\n          paddingRight: 8,\n        }}\n        placeholder=\"Type Country Name Here...\"\n        onChangeText={updateSearch}\n        value={search || ''}\n      />\n      <DropDown\n        options={chartList}\n        onSelect={sortCountries}\n        label=\"Sort countries by\"\n      />\n      <Box>\n        {filteredCountries.length < 1 ? (\n          <Text style={[styles.title, styles.text]}>\n            No counteries were found.. try another search term\n          </Text>\n        ) : (\n          filteredCountries.map(\n            (\n              {\n                country,\n                confirmed,\n                deaths,\n                recovered,\n                population,\n                precentage,\n                active,\n              },\n              index,\n            ) => {\n              return (\n                <Link to={`country/${country}`} key={index}>\n                  <View style={styles.country}>\n                    <View>\n                      <Text style={[styles.title, styles.text]}>{country}</Text>\n                      <Text style={styles.text}>\n                        <L t=\"Cases:\" /> <V t={numberWithCommas(confirmed)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Active: \" />\n                        <V t={numberWithCommas(active)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Deaths: \" />\n                        <V t={numberWithCommas(deaths)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Recovered: \" />\n                        <V t={numberWithCommas(recovered)} />\n                      </Text>\n\n                      {!!population && (\n                        <Text style={styles.text}>\n                          <L t=\"Population: \" />\n                          <V t={numberWithCommas(population)} />\n                        </Text>\n                      )}\n                      {!!precentage && (\n                        <Text style={styles.text}>\n                          <L t=\"Population infected: \" />\n                          <V t={precentage + '%'} />\n                        </Text>\n                      )}\n                    </View>\n                    <Text\n                      style={[\n                        {\n                          alignSelf: 'flex-end',\n                          color: '#fff',\n                          padding: 10,\n                          width: '100%',\n                          backgroundColor: '#00429d',\n                          lineHeight: 35,\n                          borderRadius: 3,\n                          textAlign: 'center',\n                          shadowColor: '#000',\n                          shadowOffset: {width: 0, height: 1},\n                          shadowOpacity: 0.8,\n                          shadowRadius: 2,\n                          elevation: 5,\n                        },\n                      ]}>\n                      See country stats\n                    </Text>\n                  </View>\n                </Link>\n              );\n            },\n          )\n        )}\n      </Box>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n    backgroundColor: 'darkcyan',\n    borderRadius: 3,\n    padding: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.8,\n    shadowRadius: 2,\n    elevation: 5,\n  },\n});\n\nexport default subscribe(memo(Home), state, (state) => ({\n  lastUpdated: state.lastUpdated,\n  lineChartData: state.lineChartData,\n  allCases: state.allCases,\n  allDeaths: state.allDeaths,\n  allRecovered: state.allRecovered,\n  filteredCountries: state.filteredCountries,\n  search: state.search,\n  chartData: state.chartData,\n}));\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\n\nconst labelStyle = {\n  color: '#fff',\n  alignSelf: 'center',\n  marginTop: 10,\n  marginBottom: 10,\n};\nconst DropDown = ({onSelect, label, options}) => {\n  return (\n    <View className=\"select\">\n      <label style={labelStyle}>{label}:</label>\n      <select\n        onChange={(e) => {\n          onSelect(e.currentTarget.value);\n        }}>\n        {Object.keys(options).map((i) => {\n          return (\n            <option key={`dropdownItem_${i}`} value={i}>\n              {i}\n            </option>\n          );\n        })}\n      </select>\n    </View>\n  );\n};\nexport default memo(DropDown);\n"],"sourceRoot":""}