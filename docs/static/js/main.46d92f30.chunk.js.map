{"version":3,"sources":["Chart.js","state.js","index.js","App.js","Home.js","Country.js","api.js","jsu.js","serviceWorker.js"],"names":["colors","logarithmicConfig","type","ticks","min","max","callback","value","index","values","Number","toString","afterBuildTicks","chartObj","push","numberWithCommas","x","s","replace","slice","length","data","legend","title","logarithmic","options","display","text","datasets","label","fontSize","responsive","maintainAspectRatio","scales","yAxes","beginAtZero","position","labels","fontColor","boxWidth","padding","View","style","marginTop","height","width","Line","BarChart","c","backgroundColor","hoverBackgroundColor","Bar","props","State","lastUpdated","search","ReactDOM","render","document","getElementById","serviceWorker","unregister","covid19","require","Promise","all","getData","getTimeSeriesData","App","d","time","console","log","countries","top10","sort","a","b","confirmed","map","i","country","chartData","borderColor","borderWidth","lineChartData","format","aTotal","bTotal","locations","forEach","l","total","countryTimeData","sets","dates","Object","keys","location","y","Date","day","getDate","month","getMonth","fill","state","setState","date","allCases","allDeaths","deaths","allRecovered","recovered","filteredCountries","ScrollView","contentContainerStyle","styles","container","Text","accessibilityRole","target","href","color","Link","to","lineHeight","Switch","Route","path","Redirect","ActivityIndicator","size","alignSelf","Component","StyleSheet","create","alignItems","minHeight","box","margin","fontWeight","marginBottom","borderBottomColor","borderBottomStyle","borderBottomWidth","Value","subscribe","Box","children","L","t","V","updateSearch","filter","toLowerCase","includes","key","toDateString","flexDirection","justifyContent","LineChart","TextInput","borderRadius","paddingLeft","paddingRight","placeholder","onChangeText","useParams","useState","barData","setBarData","dailyInfections","setDailyInfections","timeData","setTimeData","setCountryData","useEffect","find","countryData","daily","parseInt","dailyInfectionsData","fetch","method","body","j","json","moment","request","csv","r","localStorage","getItem","undefined","setItem","JSON","stringify","removeItem","Covid19","this","fetchData","addRemoteTimesSeries","addRemoteDailyReports","subtract","error","fromStream","get","resolve","reject","obj","lat","lon","lastUpdate","then","groupBy","array","totalConfirmed","totalRecovered","totalDeaths","allConfirmed","result","added","entry","m","diff","add","dateObj","lastDate","groupByTimesSeries","grandTotal","root","module","exports","config","navigator","URL","process","window","origin","addEventListener","swUrl","isLocalhost","headers","response","contentType","status","indexOf","ready","registration","reload","registerValidSW","catch","checkValidServiceWorker","message","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.46d92f30.chunk.js","sourcesContent":["import React from 'react';\nimport {Pie, Bar, Line} from 'react-chartjs-2';\nimport {View} from 'react-native';\n\nexport const colors = [\n  '#ff0029',\n  '#377eb8',\n  '#7f80cd',\n  '#66a61e',\n  '#984ea3',\n  '#00d2d5',\n  '#ff7f00',\n  '#af8d00',\n  '#b3e900',\n  '#fec254',\n  '#ccebc5',\n  '#a63603',\n  '#016c59',\n  '#e7298a',\n  '#c994c7',\n  '#dfdf00',\n  '#df00df',\n  '#80ff80',\n];\nconst logarithmicConfig = {\n  type: 'logarithmic',\n  ticks: {\n    min: 0.1, //minimum tick\n    max: 1000, //maximum tick\n    callback: function (value, index, values) {\n      return Number(value.toString()); //pass tick values as a string into Number function\n    },\n  },\n  afterBuildTicks: function (chartObj) {\n    //Build ticks labelling as per your need\n    chartObj.ticks = [];\n    chartObj.ticks.push(0.1);\n    chartObj.ticks.push(1);\n    chartObj.ticks.push(10);\n    chartObj.ticks.push(100);\n    chartObj.ticks.push(1000);\n  },\n};\n\nfunction numberWithCommas(x) {\n  const s = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  if (x > 999) {\n    return `${s.slice(0, s.length - 4)}K`;\n  }\n  return s;\n}\nexport const LineChart = ({data, legend, title, logarithmic}) => {\n  const options = {\n    title: {\n      display: logarithmic || !!title,\n      text: logarithmic ? 'Logarithmic chart' : data.datasets[0].label,\n      fontSize: 20,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return numberWithCommas(value);\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: !!legend,\n      position: 'bottom',\n      labels: {\n        fontColor: 'white',\n        boxWidth: 20,\n        padding: 20,\n      },\n    },\n  };\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line\n        data={data}\n        options={logarithmic ? {...logarithmicConfig, ...options} : options}\n      />\n    </View>\n  );\n};\nexport const BarChart = ({data, colors: c}) => {\n  data.datasets[0].backgroundColor = c || colors;\n  data.datasets[0].hoverBackgroundColor = c || colors;\n  return (\n    <View\n      style={{\n        marginTop: 20,\n        height: '40vh',\n        width: '100%',\n        position: 'relative',\n      }}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: false,\n            // text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n};\n\nconst PieChart = ({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors;\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/* \n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n};\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      {/* <PieChart {...props} /> */}\n    </>\n  );\n};\nexport default Chart;\n","import {State} from 'jstates-react';\n\nconst state = new State('state', {\n  lastUpdated: null,\n  search: '',\n});\n\nexport default state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  ScrollView,\n} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport {subscribe} from 'jstates-react';\nimport Home from './Home';\nimport Country from './Country';\nimport {colors} from './Chart';\nimport getData from './api';\nimport state from './state';\n\nconst Covid19 = require('./jsu');\nconst covid19 = new Covid19();\nPromise.all([covid19.getData(), covid19.getTimeSeriesData('confirmed')]);\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nclass App extends Component {\n  async componentDidMount() {\n    // Promise.all([covid19.getData(), covid19.getTimeSeriesData('confirmed')])\n    //   .then(([d, time]) => {\n    //     console.log('--¯_(ツ)_/¯-----------d.json()----------', d.json());\n    //     console.log('--¯_(ツ)_/¯-----------time.json()----------', time.json());\n    //   });\n    const [d, time] = await Promise.all([\n      covid19.getData(),\n      covid19.getTimeSeriesData('confirmed'),\n    ]);\n    // const {d, time} = await getData();\n    console.log('--¯_(ツ)_/¯-----------d----------', d);\n    console.log('--¯_(ツ)_/¯-----------time----------', time);\n    // debugger;\n\n    const countries = d.countries;\n\n    const top10 = countries\n      .sort((a, b) => b.confirmed - a.confirmed)\n      .slice(0, 6);\n\n    const labels = top10.map((i) => i.country);\n    const data = top10.map((i) => i.confirmed);\n    const chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Cases per country',\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data,\n        },\n      ],\n    };\n    const lineChartData = {\n      labels: [],\n      datasets: [],\n    };\n    const format = (i) => (i < 10 ? `0${i}` : i);\n    const timeCountries = time.countries\n      .sort((a, b) => {\n        let aTotal = 0;\n        let bTotal = 0;\n        a.locations.forEach((l) => {\n          aTotal += l.total;\n        });\n        b.locations.forEach((l) => {\n          bTotal += l.total;\n        });\n\n        return bTotal - aTotal;\n      })\n      .slice(0, 10);\n\n    timeCountries.forEach((countryTimeData, index) => {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      if (lineChartData.labels.length < 1) {\n        lineChartData.labels = sets.map((i) => {\n          const d = new Date(i.y.replace(/-/g, '/'));\n          const day = d.getDate();\n          const month = d.getMonth() + 1;\n\n          return `${format(day)}.${format(month)}`;\n        });\n      }\n      lineChartData.datasets.push({\n        label: countryTimeData.country,\n        borderColor: colors[index],\n        fill: false,\n        borderWidth: 1,\n        data: sets.map((i) => i.x),\n      });\n    });\n    state.setState({\n      lastUpdated: new Date(d.date.replace(/-/g, '/')),\n      allCases: numberWithCommas(d.confirmed),\n      allDeaths: numberWithCommas(d.deaths),\n      allRecovered: numberWithCommas(d.recovered),\n      countries,\n      filteredCountries: countries,\n      chartData,\n      time,\n      lineChartData,\n    });\n  }\n\n  render() {\n    const {lastUpdated} = state.state;\n\n    return (\n      <Router>\n        <ScrollView contentContainerStyle={styles.container}>\n          <View style={styles.container}>\n            <Text\n              accessibilityRole=\"link\"\n              target=\"_blank\"\n              href=\"https://github.com/CSSEGISandData/COVID-19\"\n              style={[\n                styles.title,\n                {color: '#aaa', padding: 10, width: '100%'},\n              ]}>\n              COVID-19 data provided by Johns Hopkins CSSE\n            </Text>\n            {!lastUpdated ? (\n              <ActivityIndicator\n                size=\"large\"\n                style={{\n                  marginTop: 40,\n                  alignSelf: 'center',\n                }}\n              />\n            ) : (\n              <>\n                <Link to=\"/\">\n                  <Text\n                    style={[\n                      styles.title,\n                      {\n                        color: '#fff',\n                        padding: 10,\n                        width: '100%',\n                        backgroundColor: '#00429d',\n                        lineHeight: 35,\n                      },\n                    ]}>\n                    Go Back Home\n                  </Text>\n                </Link>\n\n                <Switch>\n                  <Route path=\"/country/:country\">\n                    <Country />\n                  </Route>\n                  <Route path=\"/\">\n                    <Home />\n                  </Route>\n                  <Redirect to=\"/\" />\n                </Switch>\n              </>\n            )}\n          </View>\n        </ScrollView>\n      </Router>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  box: {\n    margin: 10,\n    padding: 10,\n    width: '80%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: '#ddd',\n  },\n  Value: {\n    color: '#fff',\n  },\n});\n\nexport default subscribe(App, [state]);\n","import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TextInput,\n} from 'react-native';\nimport {Link} from 'react-router-dom';\nimport Chart, {LineChart} from './Chart';\nimport state from './state';\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nconst Box = ({children, style}) => (\n  <View style={[styles.box, style]}>{children}</View>\n);\n\nconst L = ({t}) => <Text style={styles.label}>{t}</Text>;\nconst V = ({t}) => <Text style={styles.value}>{t}</Text>;\n\nconst updateSearch = (search = '') => {\n  state.setState({search});\n  if (search.length) {\n    const filteredCountries = state.state.countries.filter((i) =>\n      i.country.toLowerCase().includes(search.toLowerCase()),\n    );\n    state.setState({filteredCountries});\n  } else {\n    state.setState({filteredCountries: state.state.countries});\n  }\n};\nconst Home = () => {\n  const {\n    lastUpdated,\n    lineChartData,\n    allCases,\n    allDeaths,\n    allRecovered,\n    filteredCountries,\n    search,\n    chartData,\n  } = state.state;\n\n  return (\n    <View style={styles.container}>\n      {!lastUpdated ? (\n        <ActivityIndicator\n          size=\"large\"\n          style={{\n            marginTop: 40,\n            alignSelf: 'center',\n          }}\n        />\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>Worldwide</Text>\n            <Text key={`Total cases: ${allCases}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={allCases} />\n            </Text>\n            <Text key={`Total deaths: ${allDeaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={allDeaths} />\n            </Text>\n            <Text key={`Total recovered: ${allRecovered}`} style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={allRecovered} />\n            </Text>\n            <Text\n              key={`updated on: ${lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          <View\n            style={{\n              width: '80%',\n              marginBottom: 20,\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}>\n            <Chart data={chartData} />\n            <LineChart data={lineChartData} legend />\n            {/* <LineChart data={lineChartData} legend logarithmic /> */}\n          </View>\n          <TextInput\n            style={{\n              height: 40,\n              borderColor: 'gray',\n              borderWidth: 1,\n              backgroundColor: '#ccc',\n              width: '80%',\n              borderRadius: 3,\n              paddingLeft: 8,\n              paddingRight: 8,\n            }}\n            placeholder=\"Type Country Name Here...\"\n            onChangeText={updateSearch}\n            value={search || ''}\n          />\n          <Box>\n            {filteredCountries.length < 1 ? (\n              <Text style={[styles.title, styles.text]}>\n                No counteries were found.. try another search term\n              </Text>\n            ) : (\n              filteredCountries.map(\n                ({country, confirmed, deaths, recovered}, index) => (\n                  <Link to={`/country/${country}`} key={index}>\n                    <View style={styles.country}>\n                      <Text style={[styles.title, styles.text]}>{country}</Text>\n                      <Text style={styles.text}>\n                        <L t=\"Cases:\" /> <V t={numberWithCommas(confirmed)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Deaths: \" />\n                        <V t={numberWithCommas(deaths)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Recovered: \" />\n                        <V t={numberWithCommas(recovered)} />\n                      </Text>\n                    </View>\n                  </Link>\n                ),\n              )\n            )}\n          </Box>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  box: {\n    margin: 10,\n    padding: 10,\n    width: '80%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: '#ddd',\n  },\n  Value: {\n    color: '#fff',\n  },\n});\n\nexport default Home;\n","import React, {useEffect, useState} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams} from 'react-router-dom';\nimport {LineChart, BarChart} from './Chart';\nimport state from './state';\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nconst Box = ({children, style}) => (\n  <View style={[styles.box, style]}>{children}</View>\n);\n\nconst L = ({t}) => <Text style={styles.label}>{t}</Text>;\nconst V = ({t}) => <Text style={styles.value}>{t}</Text>;\n\nconst Country = () => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [dailyInfections, setDailyInfections] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n\n  useEffect(() => {\n    const {countries, time} = state.state;\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const format = (i) => (i < 10 ? `0${i}` : i);\n      const labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n      const lineChartData = {\n        labels,\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderWidth: 2,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n      const daily = sets.map(\n        (i, index) =>\n          parseInt(i.x) - parseInt((sets[index - 1] && sets[index - 1].x) || 0),\n      );\n      const dailyInfectionsData = {\n        labels: labels.slice(1),\n        datasets: [\n          {\n            label: 'Daily Cases',\n            backgroundColor: '#d45757',\n            borderWidth: 2,\n            data: daily.slice(1),\n          },\n        ],\n      };\n      setDailyInfections(dailyInfectionsData);\n    }\n  }, [country]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            <Text\n              key={`updated on: ${state.state.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={state.state.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          {!!timeData && (\n            <View style={{width: '80%', marginBottom: 20}}>\n              <LineChart data={timeData} title />\n              {dailyInfections && <LineChart data={dailyInfections} title />}\n              <BarChart\n                data={barData}\n                colors={['#ff2222', '#00ff00', '#ccc']}\n              />\n            </View>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  box: {\n    margin: 10,\n    padding: 10,\n    width: '80%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: '#ddd',\n  },\n  Value: {\n    color: '#fff',\n  },\n});\n\nexport default Country;\n","const API =\n  process.env.NODE_ENV === 'production'\n    ? '/api/data'\n    : 'http://localhost:5000/api/data';\n\nconst getData = async () => {\n  const j = await fetch(API, {\n    method: 'post',\n    body: {},\n  });\n  const d = j.json();\n  return d;\n};\n\nexport default getData;\n","const moment = require('moment');\nconst request = require('request');\nconst csv = require('csvtojson');\n// const objectToFile = require('object-to-file');\nexport const d = {};\n// var objectToFiledb = new objectToFile.default('testing-runkit');\nconst db = {\n  fetch: async (key) => {\n    const r = localStorage.getItem(key);\n    // const r = await objectToFiledb.read(key);\n    return !r ? undefined : r;\n  },\n  set: async (key, data) => {\n    // const r = await objectToFiledb.push(key, data);\n    const r = localStorage.setItem(key, JSON.stringify(data));\n    return !r ? undefined : r;\n  },\n  delete: async (key) => {\n    const r = localStorage.removeItem(key);\n    // const r = await objectToFiledb.delete(key);\n    return !r ? undefined : r;\n  },\n};\n\nclass Covid19 {\n  async getData(date) {\n    let data = {};\n    if (date != undefined) {\n      date = moment(date, 'MM-DD-YYYY').format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    } else {\n      date = moment().format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    }\n    return data;\n  }\n\n  async getTimeSeriesData(type) {\n    var data = {};\n    let date = moment().format('MM-DD-YYYY');\n    type = type.toLowerCase();\n    data = d[type];\n    if (data === undefined || (data && data.lastUpdated !== date)) {\n      await this.addRemoteTimesSeries(type);\n      data = d[type];\n    }\n    return data;\n  }\n\n  async fetchData(date) {\n    var data = {};\n    //console.log(`Fetching data from: ${date}`)\n    data = d[date];\n    while (\n      data === undefined &&\n      moment(date, 'MM-DD-YYYY') >= moment('01-22-2020', 'MM-DD-YYYY')\n    ) {\n      //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from ${date}`)\n      await this.addRemoteDailyReports(date);\n      data = d[date];\n      if (data == undefined) {\n        //console.log(`REMOTE data from ${date} not found...attempting to fetch LOCAL data from one day before.`)\n        date = moment(date, 'MM-DD-YYYY')\n          .subtract(1, 'days')\n          .format('MM-DD-YYYY');\n        data = d[date];\n        if (data === undefined) {\n          //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from one day before.`)\n          await this.addRemoteDailyReports(date);\n          data = d[date];\n        }\n      }\n    }\n    if (data === undefined) {\n      data = {error: 'Data not found. Plase try again.'};\n    }\n    return data;\n  }\n\n  async addRemoteDailyReports(date) {\n    let locations = [];\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var obj = {};\n          if (\n            moment(date, 'MM-DD-YYYY') <= moment('03-22-2020', 'MM-DD-YYYY')\n          ) {\n            obj = {\n              country: json['Country/Region'] || '',\n              state: json['Province/State'] || '',\n              lat: json['Latitude'] || '0.0',\n              lon: json['Longitude'] || '0.0',\n              lastUpdate: json['Last Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          } else {\n            // console.log('after 03-22-2020');\n            obj = {\n              country: json['Country_Region'] || '',\n              state: json['Province_State'] || '',\n              lat: json['Lat'] || '0.0',\n              lon: json['Long_'] || '0.0',\n              lastUpdate: json['Last_Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          }\n          locations.push(obj);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (locations.length > 0) {\n          let countries = await this.groupBy('country', locations, date);\n          delete d[date];\n          d[date] = countries;\n        }\n      });\n  }\n\n  async groupBy(key, array, date) {\n    var json = {};\n    var result = [];\n    var totalConfirmed = 0;\n    var totalRecovered = 0;\n    var totalDeaths = 0;\n\n    var allConfirmed = 0;\n    var allRecovered = 0;\n    var allDeaths = 0;\n\n    json.countries = result;\n\n    for (var i = 0; i < array.length; i++) {\n      var added = false;\n      totalConfirmed = 0;\n      totalRecovered = 0;\n      totalDeaths = 0;\n\n      allConfirmed += parseInt(array[i].confirmed);\n      allRecovered += parseInt(array[i].recovered);\n      allDeaths += parseInt(array[i].deaths);\n\n      // adds the reset of the locations for the country\n      for (var j = 0; j < result.length; j++) {\n        if (result[j][key] == array[i][key]) {\n          totalConfirmed += parseInt(array[i].confirmed);\n          result[j].confirmed = totalConfirmed + parseInt(result[j].confirmed);\n\n          totalRecovered += parseInt(array[i].recovered);\n          result[j].recovered = totalRecovered + parseInt(result[j].recovered);\n\n          totalDeaths += parseInt(array[i].deaths);\n          result[j].deaths = totalDeaths + parseInt(result[j].deaths);\n\n          result[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        totalConfirmed = 0;\n        totalRecovered = 0;\n        totalDeaths = 0;\n        var entry = {locations: []};\n\n        totalConfirmed += parseInt(array[i].confirmed);\n        entry['confirmed'] = totalConfirmed;\n\n        totalRecovered += parseInt(array[i].recovered);\n        entry['recovered'] = totalRecovered;\n\n        totalDeaths += parseInt(array[i].deaths);\n        entry['deaths'] = totalDeaths;\n\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n\n        entry.locations.push(array[i]);\n        result.push(entry);\n      }\n    }\n\n    json.date = date;\n    json.confirmed = allConfirmed;\n    json.recovered = allRecovered;\n    json.deaths = allDeaths;\n\n    return json;\n  }\n\n  async addRemoteTimesSeries(type) {\n    var countries = [];\n    let min = moment('2020-03-11');\n    let max = moment();\n    //let initCapType = type.charAt(0).toUpperCase() + type.slice(1)\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${type}_global.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var location = {\n            country: json['Country/Region'] || '',\n            state: json['Province/State'] || '',\n            lat: json['Lat'] || '0.0',\n            lon: json['Long'] || '0.0',\n          };\n          let dates = [];\n          for (\n            var m = moment(min);\n            m.diff(max, 'days') <= 0;\n            m.add(1, 'days')\n          ) {\n            let date = m.format('M/D/YY');\n            if (json[date] != undefined) {\n              let value = parseInt(json[date]) || 0;\n              let dateObj = {\n                [m.format('MM-DD-YYYY')]: value,\n              };\n              dates.push(dateObj);\n            }\n          }\n\n          if (dates.length > 0) {\n            let lastDate = dates[dates.length - 1];\n            location.total = Object.values(lastDate)[0];\n          }\n\n          location.dates = dates;\n          countries.push(location);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (countries.length > 0) {\n          countries = await this.groupByTimesSeries('country', countries);\n\n          delete d[type];\n          d[type] = countries;\n        }\n      });\n  }\n\n  async groupByTimesSeries(key, array) {\n    let root = {};\n    var locations = [];\n    var grandTotal = 0;\n\n    root.countries = locations;\n\n    for (var i = 0; i < array.length; i++) {\n      var total = 0;\n      var added = false;\n      // adds the reset of the locations for the country\n      for (var j = 0; j < locations.length; j++) {\n        if (locations[j][key] == array[i][key]) {\n          total += parseInt(array[i].total) || 0;\n          locations[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        var entry = {locations: []};\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n        total += parseInt(array[i]['total']) || 0;\n        entry.locations.push(array[i]);\n        locations.push(entry);\n      }\n\n      locations[j].total = total;\n      grandTotal += total;\n    }\n\n    root.lastUpdated = moment().format('MM-DD-YYYY');\n    root.total = grandTotal;\n    return root;\n  }\n}\n\nmodule.exports = Covid19;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}