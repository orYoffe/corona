{"version":3,"sources":["Home.js","DropDown.js"],"names":["Map","React","lazy","Chart","LineChart","then","module","default","updateSearch","search","state","setState","currentState","getState","length","filteredCountries","countries","filter","i","country","toLowerCase","includes","sortBy","sortCountries","setNewChartData","sort","chartData","generateBarData","slice","chartList","value","property","a","b","HomeCharts","subscribe","memo","lineChartData","View","style","width","marginBottom","flexDirection","justifyContent","alignItems","options","onSelect","label","Suspense","fallback","ActivityIndicator","size","marginTop","height","alignSelf","data","legend","List","Box","Text","styles","title","text","map","index","confirmed","deaths","recovered","population","precentage","active","Link","to","key","L","t","V","numberWithCommas","color","padding","backgroundColor","lineHeight","borderRadius","textAlign","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","StyleSheet","create","container","fontWeight","fontSize","borderBottomColor","borderBottomStyle","borderBottomWidth","lastUpdated","allCases","allDeaths","allRecovered","toDateString","TextInput","borderColor","borderWidth","paddingLeft","paddingRight","placeholder","onChangeText","labelStyle","className","onChange","e","currentTarget","Object","keys"],"mappings":"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","file":"static/js/7.0bab0539.chunk.js","sourcesContent":["import React, {memo, Suspense, useEffect} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TextInput,\n} from 'react-native';\nimport {subscribe} from 'jstates-react';\nimport {Link} from 'react-router-dom';\nimport state from './state';\nimport DropDown from './DropDown';\nimport {chartList, generateBarData, numberWithCommas, Box, L, V} from './utils';\nconst Map = React.lazy(() => import('./Map'));\nconst Chart = React.lazy(() => import('./Chart'));\nconst LineChart = React.lazy(() =>\n  import('./Chart').then((module) => ({\n    default: module.LineChart,\n  })),\n);\n\nconst updateSearch = (search = '') => {\n  state.setState({search});\n  const currentState = state.getState();\n  if (search.length) {\n    let filteredCountries = currentState.countries.filter((i) =>\n      i.country.toLowerCase().includes(search.toLowerCase()),\n    );\n\n    state.setState({filteredCountries}, () => {\n      if (currentState.sortBy) {\n        sortCountries(currentState.sortBy);\n      }\n    });\n  } else {\n    state.setState({filteredCountries: currentState.countries});\n  }\n};\n\nconst setNewChartData = (sort = 'confirmed') => {\n  const chartData = generateBarData(\n    state.getState().countries.slice(0),\n    chartList[sort],\n  );\n\n  state.setState({chartData});\n};\n\nconst sortCountries = (value) => {\n  let property = chartList[value];\n  const filteredCountries = state\n    .getState()\n    .filteredCountries.slice()\n    .sort((a, b) => b[property] - a[property]);\n  state.setState({filteredCountries, sortBy: value});\n};\n\nconst HCharts = ({chartData, lineChartData}) => {\n  return (\n    <View\n      style={{\n        width: '80%',\n        marginBottom: 20,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n      <DropDown\n        options={chartList}\n        onSelect={setNewChartData}\n        label=\"Select chart data\"\n      />\n\n      {chartData && (\n        <Suspense\n          fallback={\n            <ActivityIndicator\n              size=\"large\"\n              style={{\n                marginTop: 40,\n                height: 200,\n                alignSelf: 'center',\n              }}\n            />\n          }>\n          <Chart data={chartData} />\n        </Suspense>\n      )}\n      {lineChartData && (\n        <Suspense fallback=\"\">\n          <LineChart data={lineChartData} legend />\n        </Suspense>\n      )}\n    </View>\n  );\n};\nconst HomeCharts = subscribe(memo(HCharts), state, (state) => ({\n  lineChartData: state.lineChartData,\n  chartData: state.chartData,\n}));\n\nconst List = subscribe(\n  memo(({filteredCountries}) => {\n    return (\n      <Box>\n        {!filteredCountries ? (\n          <ActivityIndicator\n            size=\"large\"\n            style={{\n              marginTop: 40,\n              alignSelf: 'center',\n            }}\n          />\n        ) : filteredCountries.length < 1 ? (\n          <Text style={[styles.title, styles.text]}>\n            No counteries were found.. try another search term\n          </Text>\n        ) : (\n          filteredCountries.map(\n            (\n              {\n                country,\n                confirmed,\n                deaths,\n                recovered,\n                population,\n                precentage,\n                active,\n              },\n              index,\n            ) => {\n              return (\n                <Link to={`country/${country}`} key={index}>\n                  <View style={styles.country}>\n                    <View>\n                      <Text style={[styles.title, styles.text]}>{country}</Text>\n                      <Text style={styles.text}>\n                        <L t=\"Cases:\" /> <V t={numberWithCommas(confirmed)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Active: \" />\n                        <V t={numberWithCommas(active)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Deaths: \" />\n                        <V t={numberWithCommas(deaths)} />\n                      </Text>\n                      <Text style={styles.text}>\n                        <L t=\"Recovered: \" />\n                        <V t={numberWithCommas(recovered)} />\n                      </Text>\n\n                      {!!population && (\n                        <Text style={styles.text}>\n                          <L t=\"Population: \" />\n                          <V t={numberWithCommas(population)} />\n                        </Text>\n                      )}\n                      {!!precentage && (\n                        <Text style={styles.text}>\n                          <L t=\"Population infected: \" />\n                          <V t={precentage + '%'} />\n                        </Text>\n                      )}\n                    </View>\n                    <Text\n                      style={[\n                        {\n                          alignSelf: 'flex-end',\n                          color: '#fff',\n                          padding: 10,\n                          width: '100%',\n                          backgroundColor: '#00429d',\n                          lineHeight: 35,\n                          borderRadius: 3,\n                          textAlign: 'center',\n                          shadowColor: '#000',\n                          shadowOffset: {width: 0, height: 1},\n                          shadowOpacity: 0.8,\n                          shadowRadius: 2,\n                          elevation: 5,\n                        },\n                      ]}>\n                      See country stats\n                    </Text>\n                  </View>\n                </Link>\n              );\n            },\n          )\n        )}\n      </Box>\n    );\n  }),\n  state,\n  (state) => ({\n    filteredCountries: state.filteredCountries,\n  }),\n);\n\nconst Home = ({lastUpdated, allCases, allDeaths, allRecovered, search}) => {\n  return (\n    <View style={styles.container}>\n      <Suspense\n        fallback={\n          <ActivityIndicator\n            size=\"large\"\n            style={{\n              marginTop: 40,\n              height: 400,\n              alignSelf: 'center',\n            }}\n          />\n        }>\n        <Map />\n      </Suspense>\n      {lastUpdated && (\n        <Box\n          style={{\n            borderBottomColor: '#fff',\n            borderBottomStyle: 'solid',\n            borderBottomWidth: 1,\n          }}>\n          <Text style={[styles.title, styles.text]}>Worldwide</Text>\n          <Text key={`Total cases: ${allCases}`} style={styles.text}>\n            <L t=\"Total cases: \" />\n            <V t={allCases} />\n          </Text>\n          <Text key={`Total deaths: ${allDeaths}`} style={styles.text}>\n            <L t=\"Total deaths: \" />\n            <V t={allDeaths} />\n          </Text>\n          <Text key={`Total recovered: ${allRecovered}`} style={styles.text}>\n            <L t=\"Total recovered: \" />\n            <V t={allRecovered} />\n          </Text>\n          <Text\n            key={`updated on: ${lastUpdated.toDateString()}`}\n            style={styles.text}>\n            <L t=\"Updated on: \" />\n            <V t={lastUpdated.toDateString()} />\n          </Text>\n        </Box>\n      )}\n      <HomeCharts />\n      <TextInput\n        style={{\n          height: 40,\n          borderColor: 'gray',\n          borderWidth: 1,\n          backgroundColor: '#ccc',\n          width: '80%',\n          borderRadius: 3,\n          paddingLeft: 8,\n          paddingRight: 8,\n        }}\n        placeholder=\"Type Country Name Here...\"\n        onChangeText={updateSearch}\n        value={search || ''}\n      />\n      <DropDown\n        options={chartList}\n        onSelect={sortCountries}\n        label=\"Sort countries by\"\n      />\n      <List />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n    backgroundColor: 'darkcyan',\n    borderRadius: 3,\n    padding: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.8,\n    shadowRadius: 2,\n    elevation: 5,\n  },\n});\n\nexport default subscribe(memo(Home), state, (state) => ({\n  lastUpdated: state.lastUpdated,\n  allCases: state.allCases,\n  allDeaths: state.allDeaths,\n  allRecovered: state.allRecovered,\n  search: state.search,\n}));\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\n\nconst labelStyle = {\n  color: '#fff',\n  alignSelf: 'center',\n  marginTop: 10,\n  marginBottom: 10,\n};\nconst DropDown = ({onSelect, label, options}) => {\n  return (\n    <View className=\"select\">\n      <label style={labelStyle}>{label}:</label>\n      <select\n        onChange={(e) => {\n          onSelect(e.currentTarget.value);\n        }}>\n        {Object.keys(options).map((i) => {\n          return (\n            <option key={`dropdownItem_${i}`} value={i}>\n              {i}\n            </option>\n          );\n        })}\n      </select>\n    </View>\n  );\n};\nexport default memo(DropDown);\n"],"sourceRoot":""}