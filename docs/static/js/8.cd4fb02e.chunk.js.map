{"version":3,"sources":["Map.js"],"names":["RED","Mapx","lat","lng","zoom","React","createRef","mapRef","current","leafletElement","getZoom","setState","console","log","this","state","View","style","width","position","marginBottom","marginTop","Map","minZoom","ref","onzoomend","handleZoom","center","height","TileLayer","attribution","url","props","countries","map","data","cords","country","confirmed","deaths","recovered","population","locations","length","find","i","coords","x","y","z","coord","Math","PI","lon","cos","sin","total","centrallon","atan2","centralSquareRoot","sqrt","averageGeolocation","point","confirmedWidth","toFixed","recoveredWidth","deathsWidth","outerCircle","backgroundColor","color","borderRadius","textAlign","marginLeft","display","alignItems","justifyContent","recoveredCircle","zIndex","margin","deathCircle","iconMarkup","renderToStaticMarkup","customMarkerIcon","divIcon","html","Marker","key","icon","Popup","numberWithCommas","PureComponent","subscribe"],"mappings":"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","file":"static/js/8.cd4fb02e.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\nimport {View} from 'react-native';\nimport {renderToStaticMarkup} from 'react-dom/server';\nimport {divIcon} from 'leaflet';\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet';\n\nimport {subscribe} from 'jstates-react';\nimport state from './state';\nimport {numberWithCommas} from './utils';\n\nfunction averageGeolocation(coords) {\n  if (coords.length === 1) {\n    return coords[0];\n  }\n\n  let x = 0.0;\n  let y = 0.0;\n  let z = 0.0;\n\n  for (let coord of coords) {\n    let lat = (coord.lat * Math.PI) / 180;\n    let lon = (coord.lon * Math.PI) / 180;\n\n    x += Math.cos(lat) * Math.cos(lon);\n    y += Math.cos(lat) * Math.sin(lon);\n    z += Math.sin(lat);\n  }\n\n  let total = coords.length;\n\n  x = x / total;\n  y = y / total;\n  z = z / total;\n\n  let centrallon = Math.atan2(y, x);\n  let centralSquareRoot = Math.sqrt(x * x + y * y);\n  let centrallat = Math.atan2(z, centralSquareRoot);\n\n  return {\n    lat: (centrallat * 180) / Math.PI,\n    lon: (centrallon * 180) / Math.PI,\n  };\n}\n\nconst ZOOM_4 = 1058;\nconst ZOOM_5 = 1558;\n\nconst RED = '#f00c32';\nconst GREEN = '#08cf47';\nconst GREY = '#30242d';\nclass Mapx extends PureComponent {\n  state = {\n    lat: 51.165690999999995,\n    lng: 10.451526,\n    zoom: 3,\n  };\n\n  mapRef = React.createRef();\n\n  handleZoom = () => {\n    const zoom = this.mapRef && this.mapRef.current.leafletElement.getZoom();\n    if (zoom) {\n      this.setState({zoom});\n    }\n  };\n\n  render() {\n    console.log(\n      '--¯_(ツ)_/¯-----------this.state.zoom----------',\n      this.state.zoom,\n    );\n    return (\n      <View\n        style={{\n          width: '100%',\n          position: 'relative',\n          marginBottom: 20,\n          marginTop: 20,\n        }}>\n        <Map\n          minZoom={2}\n          ref={this.mapRef}\n          onzoomend={this.handleZoom}\n          center={[this.state.lat, this.state.lng]}\n          zoom={this.state.zoom}\n          style={{width: '100%', position: 'relative', height: 400}}>\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n            url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\n          />\n          {!!this.props.countries &&\n            this.props.countries.map((data) => {\n              const {\n                country,\n                confirmed,\n                deaths,\n                recovered,\n                population,\n                locations,\n              } = data;\n              let cords;\n              if (locations.length > 1) {\n                cords = locations.find((i) => i.state === '');\n                if (!cords) {\n                  cords = averageGeolocation(locations);\n                }\n              } else {\n                cords = locations[0];\n              }\n              const point = [cords.lat, cords.lon];\n\n              let confirmedWidth = (\n                (confirmed / 100 / 2 / 10) *\n                (this.state.zoom * 2)\n              ).toFixed(2);\n\n              confirmedWidth = confirmedWidth > 40 ? confirmedWidth : 40;\n              let recoveredWidth = ((recovered / confirmed) * 100).toFixed(2);\n              let deathsWidth = ((deaths / confirmed) * 100).toFixed(2);\n\n              if (this.state.zoom < 5) {\n                confirmedWidth =\n                  confirmedWidth < ZOOM_4 ? confirmedWidth : ZOOM_4;\n              } else {\n                confirmedWidth =\n                  confirmedWidth < ZOOM_5 ? confirmedWidth : ZOOM_5;\n              }\n              //   recoveredWidth = recoveredWidth < 1000 ? recoveredWidth : 1000;\n              //   deathsWidth = deathsWidth < 900 ? deathsWidth : 900;\n              const outerCircle = {\n                backgroundColor: RED,\n                color: RED,\n                width: `${confirmedWidth}%`,\n                height: `${confirmedWidth}%`,\n                borderRadius: 100,\n                textAlign: 'center',\n                marginLeft: `-${confirmedWidth / 2}%`,\n                marginTop: `-${confirmedWidth / 2}%`,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                position: 'relative',\n              };\n              const recoveredCircle = {\n                zIndex: 600,\n                backgroundColor: GREEN,\n                color: GREEN,\n                width: `${recoveredWidth}%`,\n                height: `${recoveredWidth}%`,\n                borderRadius: 100,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                margin: '0 auto',\n              };\n              const deathCircle = {\n                zIndex: 601,\n                position: 'absolute',\n                backgroundColor: GREY,\n                color: GREY,\n                display: 'flex',\n                width: `${deathsWidth}%`,\n                height: `${deathsWidth}%`,\n                borderRadius: 100,\n                margin: '0 auto',\n              };\n              const iconMarkup = renderToStaticMarkup(\n                <div style={outerCircle}>\n                  <div style={recoveredCircle}></div>\n                  <div style={deathCircle}></div>\n                </div>,\n              );\n              const customMarkerIcon = divIcon({\n                html: iconMarkup,\n              });\n              return (\n                <Marker position={point} key={country} icon={customMarkerIcon}>\n                  <Popup>\n                    <span>\n                      <b>{country}</b>\n                    </span>\n                    <br />\n                    <span>\n                      <span\n                        style={{\n                          backgroundColor: RED,\n                          marginTop: -5,\n                          width: 5,\n                          height: 5,\n                          borderRadius: 100,\n                          display: 'inline-block',\n                        }}>\n                        {' '}\n                      </span>{' '}\n                      Cases: {numberWithCommas(confirmed)}\n                    </span>\n                    <br />\n                    <span>\n                      <span\n                        style={{\n                          backgroundColor: GREEN,\n                          marginTop: -5,\n                          width: 5,\n                          height: 5,\n                          borderRadius: 100,\n                          display: 'inline-block',\n                        }}>\n                        {' '}\n                      </span>\n                      Recovered: {numberWithCommas(recovered)}\n                    </span>\n                    <br />\n                    <span>\n                      <span\n                        style={{\n                          backgroundColor: GREY,\n                          marginTop: -5,\n                          width: 5,\n                          height: 5,\n                          borderRadius: 100,\n                          display: 'inline-block',\n                        }}>\n                        {' '}\n                      </span>\n                      Deaths: {numberWithCommas(deaths)}\n                    </span>\n                    <br />\n                    {population && (\n                      <span>Population: {numberWithCommas(population)}</span>\n                    )}\n                  </Popup>\n                </Marker>\n              );\n            })}\n        </Map>\n      </View>\n    );\n  }\n}\nexport default subscribe(Mapx, state, (state) => ({\n  countries: state.countries,\n}));\n"],"sourceRoot":""}