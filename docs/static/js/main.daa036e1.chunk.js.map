{"version":3,"sources":["Chart.js","index.js","App.js","Country.js","Home.js","Map.js","DropDown.js","jsu.js","serviceWorker.js","utils.js","state.js"],"names":["logarithmicConfig","type","ticks","min","max","callback","value","index","values","Number","toString","afterBuildTicks","chartObj","push","LineChart","memo","data","legend","title","logarithmic","options","display","text","datasets","label","fontSize","responsive","maintainAspectRatio","scales","yAxes","beginAtZero","numberWithCommas","position","labels","fontColor","boxWidth","padding","View","style","marginTop","height","width","Line","BarChart","c","colors","backgroundColor","hoverBackgroundColor","Bar","PieChart","Pie","props","ReactDOM","render","document","getElementById","serviceWorker","unregister","covid19","require","getLineChartData","timeCountries","lineChartData","forEach","countryTimeData","sets","locations","dates","map","i","total","time","Object","keys","location","y","x","length","d","Date","replace","day","getDate","month","getMonth","format","country","borderColor","fill","borderWidth","App","Promise","all","getData","getTimeSeriesData","fetch","then","j","json","console","log","countryNamesExceptions","US","Iran","Russia","Czechia","Egypt","Slovakia","Kyrgyzstan","Venezuela","Brunei","Gambia","countries","newCountry","active","confirmed","recovered","deaths","countryPopulations","records","filter","countryName","fields","country_name","toLowerCase","countryPopulation","sort","a","b","year","population","perc","toFixed","precentage","aTotal","bTotal","l","slice","chartData","generateBarData","state","setState","lastUpdated","date","allCases","allDeaths","allRecovered","filteredCountries","basename","ScrollView","contentContainerStyle","styles","container","Text","accessibilityRole","target","href","color","textAlign","Switch","Route","path","Redirect","to","PureComponent","StyleSheet","create","alignItems","minHeight","fontWeight","redColors","Array","marginBottom","borderBottomColor","borderBottomStyle","borderBottomWidth","button","borderRadius","marginVertical","buttonText","subscribe","useParams","useState","barData","setBarData","dailyInfections","setDailyInfections","timeData","setTimeData","setCountryData","useEffect","getState","find","countryData","daily","parseInt","dailyInfectionsData","ActivityIndicator","size","alignSelf","Link","lineHeight","Box","key","L","t","V","toDateString","updateSearch","search","currentState","includes","sortBy","sortCountries","setNewChartData","chartList","property","justifyContent","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","flexDirection","onSelect","TextInput","paddingLeft","paddingRight","placeholder","onChangeText","RED","Mapx","lat","lng","zoom","React","createRef","mapRef","current","leafletElement","getZoom","this","Map","minZoom","ref","onzoomend","handleZoom","center","TileLayer","attribution","url","cords","coords","z","coord","Math","PI","lon","cos","sin","centrallon","atan2","centralSquareRoot","sqrt","averageGeolocation","point","confirmedWidth","recoveredWidth","deathsWidth","outerCircle","marginLeft","recoveredCircle","zIndex","margin","deathCircle","iconMarkup","renderToStaticMarkup","customMarkerIcon","divIcon","html","Marker","icon","Popup","labelStyle","className","onChange","e","currentTarget","moment","request","csv","Covid19","undefined","fetchData","addRemoteTimesSeries","addRemoteDailyReports","subtract","error","fromStream","get","resolve","reject","obj","lastUpdate","groupBy","array","totalConfirmed","totalRecovered","totalDeaths","allConfirmed","result","added","entry","m","diff","add","dateObj","lastDate","groupByTimesSeries","grandTotal","root","module","exports","config","navigator","URL","process","window","origin","addEventListener","swUrl","isLocalhost","headers","response","contentType","status","indexOf","ready","registration","reload","registerValidSW","catch","checkValidServiceWorker","message","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","shouldRound","s","decimal","Cases","Recovered","Deaths","top10","children","createState"],"mappings":"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","file":"static/js/main.daa036e1.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\nimport {numberWithCommas, colors} from './utils';\n\nconst logarithmicConfig = {\n  type: 'logarithmic',\n  ticks: {\n    min: 0.1, //minimum tick\n    max: 1000, //maximum tick\n    callback: function (value, index, values) {\n      return Number(value.toString()); //pass tick values as a string into Number function\n    },\n  },\n  afterBuildTicks: function (chartObj) {\n    //Build ticks labelling as per your need\n    chartObj.ticks = [];\n    chartObj.ticks.push(0.1);\n    chartObj.ticks.push(1);\n    chartObj.ticks.push(10);\n    chartObj.ticks.push(100);\n    chartObj.ticks.push(1000);\n  },\n};\nexport const LineChart = memo(({data, legend, title, logarithmic}) => {\n  const options = {\n    title: {\n      display: logarithmic || !!title,\n      text: logarithmic ? 'Logarithmic chart' : data.datasets[0].label,\n      fontSize: 20,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            callback: function (value, index, values) {\n              return numberWithCommas(value, true);\n            },\n          },\n        },\n      ],\n    },\n    legend: {\n      display: !!legend,\n      position: 'bottom',\n      labels: {\n        fontColor: 'white',\n        boxWidth: 20,\n        padding: 20,\n      },\n    },\n  };\n  return (\n    <View\n      style={{marginTop: 20, height: 450, width: '100%', position: 'relative'}}>\n      <Line\n        data={data}\n        options={logarithmic ? {...logarithmicConfig, ...options} : options}\n      />\n    </View>\n  );\n});\nexport const BarChart = memo(({data, colors: c, title}) => {\n  data.datasets[0].backgroundColor = c || colors;\n  data.datasets[0].hoverBackgroundColor = c || colors;\n  return (\n    <View\n      style={{\n        marginTop: 20,\n        height: '40vh',\n        width: '100%',\n        position: 'relative',\n      }}>\n      <Bar\n        data={data}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: function (value, index, values) {\n                    return numberWithCommas(value, true);\n                  },\n                },\n              },\n            ],\n          },\n          title: {\n            display: !!title,\n            text: data.datasets[0].label,\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n            position: 'right',\n          },\n        }}\n      />\n    </View>\n  );\n});\n\nexport const PieChart = memo(({data}) => {\n  data.datasets[0].backgroundColor = colors;\n  data.datasets[0].hoverBackgroundColor = colors;\n  return (\n    <View style={{width: '100%'}}>\n      <Pie\n        data={data}\n        options={{\n          title: {\n            display: false,\n            text: data.datasets[0].label,\n            fontSize: 16,\n          },\n          legend: {\n            display: false,\n          },\n          // legend: {\n          //   display: true,\n          //   position: 'right',\n          // },\n        }}\n      />\n      {/*\n      <Doughnut\n        data={data}\n        options={{\n          title: {\n            display: true,\n            text: 'Corona cases per country',\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      /> */}\n    </View>\n  );\n});\nconst Chart = (props) => {\n  return (\n    <>\n      <BarChart {...props} />\n      {/* <PieChart {...props} /> */}\n    </>\n  );\n};\nexport default Chart;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {PureComponent} from 'react';\nimport {StyleSheet, Text, View, ScrollView} from 'react-native';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport Country from './Country';\nimport Home from './Home';\nimport {generateBarData, numberWithCommas, colors, format} from './utils';\nimport state from './state';\n\nconst Covid19 = require('./jsu');\nconst covid19 = new Covid19();\n\nconst getLineChartData = (timeCountries) => {\n  const lineChartData = {\n    labels: [],\n    datasets: [],\n  };\n\n  timeCountries.forEach((countryTimeData, index) => {\n    const sets = countryTimeData.locations[0].dates.map((i, index) => {\n      let total = 0;\n      const time = Object.keys(i)[0];\n      countryTimeData.locations.forEach((location) => {\n        total += location.dates[index][time];\n      });\n      return {y: time, x: total};\n    });\n    if (lineChartData.labels.length < 1) {\n      lineChartData.labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n    }\n    lineChartData.datasets.push({\n      label: countryTimeData.country,\n      borderColor: colors[index],\n      fill: false,\n      borderWidth: 1,\n      data: sets.map((i) => i.x),\n    });\n  });\n\n  return lineChartData;\n};\n\nclass App extends PureComponent {\n  async componentDidMount() {\n    const [d, time, j] = await Promise.all([\n      covid19.getData(),\n      covid19.getTimeSeriesData('confirmed'),\n      fetch(\n        'https://data.opendatasoft.com/api/records/1.0/search/?dataset=world-population%40kapsarc&rows=10000&sort=year&facet=year&facet=country_name',\n      ).then((j) => j.json()),\n    ]);\n    console.log('--¯_(ツ)_/¯-----------d----------', d);\n    console.log('--¯_(ツ)_/¯-----------time----------', time);\n    console.log('--¯_(ツ)_/¯-----------j----------', j);\n    const countryNamesExceptions = {\n      US: 'United States',\n      Iran: 'Iran, Islamic Rep.',\n      Russia: 'Russian Federation',\n      'Korea, South': 'Korea, Rep.',\n      Czechia: 'Czech Republic',\n      Egypt: 'Egypt, Arab Rep.',\n      Slovakia: 'Slovak Republic',\n      Kyrgyzstan: 'Kyrgyz Republic',\n      Venezuela: 'Venezuela, RB',\n      Brunei: 'Brunei Darussalam',\n      Gambia: 'Gambia, The',\n    };\n    const countries = d.countries.map((country) => {\n      const newCountry = {\n        ...country,\n        active: country.confirmed - (country.recovered + country.deaths),\n      };\n\n      const countryPopulations = j.records.filter((i) => {\n        const countryName = i.fields.country_name;\n        return (\n          countryName.toLowerCase() === country.country.toLowerCase() ||\n          countryName === countryNamesExceptions[country.country]\n        );\n      });\n\n      if (!countryPopulations.length) {\n        return newCountry;\n      }\n\n      const countryPopulation = countryPopulations.sort(\n        (a, b) => b.fields.year - a.fields.year,\n      )[0];\n\n      if (!countryPopulation || !countryPopulation.fields.value) {\n        return newCountry;\n      }\n\n      newCountry.population = countryPopulation.fields.value;\n      const perc = (\n        (country.confirmed / countryPopulation.fields.value) *\n        100\n      ).toFixed(2);\n\n      if (perc + '' !== '0.00') {\n        newCountry.precentage = perc;\n      }\n\n      return newCountry;\n    });\n\n    const timeCountries = time.countries\n      .sort((a, b) => {\n        let aTotal = 0;\n        let bTotal = 0;\n        a.locations.forEach((l) => {\n          aTotal += l.total;\n        });\n        b.locations.forEach((l) => {\n          bTotal += l.total;\n        });\n\n        return bTotal - aTotal;\n      })\n      .slice(0, 10);\n    const chartData = generateBarData(countries);\n    const lineChartData = getLineChartData(timeCountries);\n\n    state.setState({\n      lastUpdated: new Date(d.date.replace(/-/g, '/')),\n      allCases: numberWithCommas(d.confirmed),\n      allDeaths: numberWithCommas(d.deaths),\n      allRecovered: numberWithCommas(d.recovered),\n      countries,\n      filteredCountries: countries,\n      chartData,\n      time,\n      lineChartData,\n    });\n  }\n\n  render() {\n    return (\n      <Router basename=\"/corona\">\n        <ScrollView contentContainerStyle={styles.container}>\n          <View style={styles.container}>\n            <Text\n              accessibilityRole=\"link\"\n              target=\"_blank\"\n              href=\"https://github.com/CSSEGISandData/COVID-19\"\n              style={[\n                styles.title,\n                {\n                  color: '#aaa',\n                  padding: 10,\n                  width: '100%',\n                  textAlign: 'center',\n                },\n              ]}>\n              COVID-19 data provided by Johns Hopkins CSSE\n            </Text>\n            <Switch>\n              <Route path=\"/country/:country\">\n                <Country />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n              <Redirect to=\"/\" />\n            </Switch>\n          </View>\n        </ScrollView>\n      </Router>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#222222',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default App;\n","import React, {useEffect, useState, memo} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams, Link} from 'react-router-dom';\nimport {subscribe} from 'jstates-react';\nimport {LineChart, BarChart} from './Chart';\nimport {format, numberWithCommas, Box, L, V} from './utils';\nimport state from './state';\n\nconst redColors = new Array(1000).fill('#f00c32');\n\nconst Country = (props) => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [dailyInfections, setDailyInfections] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n\n  useEffect(() => {\n    const {countries, time} = state.getState();\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n      const lineChartData = {\n        labels,\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderWidth: 2,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n      const daily = sets.map(\n        (i, index) =>\n          parseInt(i.x) - parseInt((sets[index - 1] && sets[index - 1].x) || 0),\n      );\n      const dailyInfectionsData = {\n        labels: labels.slice(1),\n        datasets: [\n          {\n            label: 'Daily Cases',\n            backgroundColor: '#d45757',\n            borderWidth: 2,\n            data: daily.slice(1),\n          },\n        ],\n      };\n      setDailyInfections(dailyInfectionsData);\n    }\n  }, [country]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Link to=\"/\">\n        <Text\n          style={[\n            styles.button,\n            styles.buttonText,\n            {\n              padding: 10,\n              width: '100%',\n              lineHeight: 35,\n            },\n          ]}>\n          Go to main page\n        </Text>\n      </Link>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total active: ${data.active}`} style={styles.text}>\n              <L t=\"Total active: \" />\n              <V t={numberWithCommas(data.active)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            {!!data.population && (\n              <Text key={`population: ${data.population}`} style={styles.text}>\n                <L t=\"Population: \" />\n                <V t={numberWithCommas(data.population)} />\n              </Text>\n            )}\n            {!!data.precentage && (\n              <Text key={`population: ${data.precentage}`} style={styles.text}>\n                <L t=\"Population infected: \" />\n                <V t={data.precentage + '%'} />\n              </Text>\n            )}\n            <Text\n              key={`updated on: ${props.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={props.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          {!!timeData && (\n            <View style={{width: '80%', marginBottom: 20}}>\n              <LineChart data={timeData} title />\n              {dailyInfections && (\n                <BarChart data={dailyInfections} colors={redColors} title />\n              )}\n              <BarChart\n                data={barData}\n                colors={['#ff2222', '#00ff00', '#ccc']}\n              />\n            </View>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n    backgroundColor: '#222222',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n  button: {\n    borderRadius: 3,\n    padding: 20,\n    marginVertical: 10,\n    marginTop: 10,\n    backgroundColor: '#1B95E0',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default subscribe(memo(Country), state, (state) => ({\n  lastUpdated: state.lastUpdated,\n}));\n","import React, {memo} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TextInput,\n} from 'react-native';\nimport {subscribe} from 'jstates-react';\nimport {Link} from 'react-router-dom';\nimport Chart, {LineChart} from './Chart';\nimport state from './state';\nimport Map from './Map';\nimport DropDown from './DropDown';\nimport {chartList, generateBarData, numberWithCommas, Box, L, V} from './utils';\n\nconst updateSearch = (search = '') => {\n  state.setState({search});\n  const currentState = state.getState();\n  if (search.length) {\n    let filteredCountries = currentState.countries.filter((i) =>\n      i.country.toLowerCase().includes(search.toLowerCase()),\n    );\n\n    state.setState({filteredCountries}, () => {\n      if (currentState.sortBy) {\n        sortCountries(currentState.sortBy);\n      }\n    });\n  } else {\n    state.setState({filteredCountries: currentState.countries});\n  }\n};\n\nconst setNewChartData = (sort = 'confirmed') => {\n  const chartData = generateBarData(\n    state.getState().countries.slice(0),\n    chartList[sort],\n  );\n\n  state.setState({chartData});\n};\n\nconst sortCountries = (value) => {\n  let property = chartList[value];\n  const filteredCountries = state\n    .getState()\n    .filteredCountries.slice()\n    .sort((a, b) => b[property] - a[property]);\n  state.setState({filteredCountries, sortBy: value});\n};\n\nconst Home = ({\n  lastUpdated,\n  lineChartData,\n  allCases,\n  allDeaths,\n  allRecovered,\n  filteredCountries,\n  search,\n  chartData,\n}) => {\n  return (\n    <View style={styles.container}>\n      {!lastUpdated ? (\n        <ActivityIndicator\n          size=\"large\"\n          style={{\n            marginTop: 40,\n            alignSelf: 'center',\n          }}\n        />\n      ) : (\n        <>\n          <Map />\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>Worldwide</Text>\n            <Text key={`Total cases: ${allCases}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={allCases} />\n            </Text>\n            <Text key={`Total deaths: ${allDeaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={allDeaths} />\n            </Text>\n            <Text key={`Total recovered: ${allRecovered}`} style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={allRecovered} />\n            </Text>\n            <Text\n              key={`updated on: ${lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          <View\n            style={{\n              width: '80%',\n              marginBottom: 20,\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}>\n            <DropDown\n              options={chartList}\n              onSelect={setNewChartData}\n              label=\"Select chart data\"\n            />\n            <Chart data={chartData} />\n            <LineChart data={lineChartData} legend />\n          </View>\n          <TextInput\n            style={{\n              height: 40,\n              borderColor: 'gray',\n              borderWidth: 1,\n              backgroundColor: '#ccc',\n              width: '80%',\n              borderRadius: 3,\n              paddingLeft: 8,\n              paddingRight: 8,\n            }}\n            placeholder=\"Type Country Name Here...\"\n            onChangeText={updateSearch}\n            value={search || ''}\n          />\n          <DropDown\n            options={chartList}\n            onSelect={sortCountries}\n            label=\"Sort countries by\"\n          />\n          <Box>\n            {filteredCountries.length < 1 ? (\n              <Text style={[styles.title, styles.text]}>\n                No counteries were found.. try another search term\n              </Text>\n            ) : (\n              filteredCountries.map(\n                (\n                  {\n                    country,\n                    confirmed,\n                    deaths,\n                    recovered,\n                    population,\n                    precentage,\n                    active,\n                  },\n                  index,\n                ) => {\n                  return (\n                    <Link to={`country/${country}`} key={index}>\n                      <View style={styles.country}>\n                        <View>\n                          <Text style={[styles.title, styles.text]}>\n                            {country}\n                          </Text>\n                          <Text style={styles.text}>\n                            <L t=\"Cases:\" />{' '}\n                            <V t={numberWithCommas(confirmed)} />\n                          </Text>\n                          <Text style={styles.text}>\n                            <L t=\"Active: \" />\n                            <V t={numberWithCommas(active)} />\n                          </Text>\n                          <Text style={styles.text}>\n                            <L t=\"Deaths: \" />\n                            <V t={numberWithCommas(deaths)} />\n                          </Text>\n                          <Text style={styles.text}>\n                            <L t=\"Recovered: \" />\n                            <V t={numberWithCommas(recovered)} />\n                          </Text>\n\n                          {!!population && (\n                            <Text style={styles.text}>\n                              <L t=\"Population: \" />\n                              <V t={numberWithCommas(population)} />\n                            </Text>\n                          )}\n                          {!!precentage && (\n                            <Text style={styles.text}>\n                              <L t=\"Population infected: \" />\n                              <V t={precentage + '%'} />\n                            </Text>\n                          )}\n                        </View>\n                        <Text\n                          style={[\n                            {\n                              alignSelf: 'flex-end',\n                              color: '#fff',\n                              padding: 10,\n                              width: '100%',\n                              backgroundColor: '#00429d',\n                              lineHeight: 35,\n                              borderRadius: 3,\n                              textAlign: 'center',\n                              shadowColor: '#000',\n                              shadowOffset: {width: 0, height: 1},\n                              shadowOpacity: 0.8,\n                              shadowRadius: 2,\n                              elevation: 5,\n                            },\n                          ]}>\n                          See country stats\n                        </Text>\n                      </View>\n                    </Link>\n                  );\n                },\n              )\n            )}\n          </Box>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n    backgroundColor: 'darkcyan',\n    borderRadius: 3,\n    padding: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.8,\n    shadowRadius: 2,\n    elevation: 5,\n  },\n});\n\nexport default subscribe(memo(Home), state, (state) => ({\n  lastUpdated: state.lastUpdated,\n  lineChartData: state.lineChartData,\n  allCases: state.allCases,\n  allDeaths: state.allDeaths,\n  allRecovered: state.allRecovered,\n  filteredCountries: state.filteredCountries,\n  search: state.search,\n  chartData: state.chartData,\n}));\n","import React, {PureComponent} from 'react';\nimport {View} from 'react-native';\nimport {renderToStaticMarkup} from 'react-dom/server';\nimport {divIcon} from 'leaflet';\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet';\n\nimport {subscribe} from 'jstates-react';\nimport state from './state';\nimport {numberWithCommas} from './utils';\n\nfunction averageGeolocation(coords) {\n  if (coords.length === 1) {\n    return coords[0];\n  }\n\n  let x = 0.0;\n  let y = 0.0;\n  let z = 0.0;\n\n  for (let coord of coords) {\n    let lat = (coord.lat * Math.PI) / 180;\n    let lon = (coord.lon * Math.PI) / 180;\n\n    x += Math.cos(lat) * Math.cos(lon);\n    y += Math.cos(lat) * Math.sin(lon);\n    z += Math.sin(lat);\n  }\n\n  let total = coords.length;\n\n  x = x / total;\n  y = y / total;\n  z = z / total;\n\n  let centrallon = Math.atan2(y, x);\n  let centralSquareRoot = Math.sqrt(x * x + y * y);\n  let centrallat = Math.atan2(z, centralSquareRoot);\n\n  return {\n    lat: (centrallat * 180) / Math.PI,\n    lon: (centrallon * 180) / Math.PI,\n  };\n}\n\nconst ZOOM_4 = 1058;\nconst ZOOM_5 = 1558;\n\nconst RED = '#f00c32';\nconst GREEN = '#08cf47';\nconst GREY = '#30242d';\nclass Mapx extends PureComponent {\n  state = {\n    lat: 51.165690999999995,\n    lng: 10.451526,\n    zoom: 3,\n  };\n\n  mapRef = React.createRef();\n\n  handleZoom = () => {\n    const zoom = this.mapRef && this.mapRef.current.leafletElement.getZoom();\n    if (zoom) {\n      this.setState({zoom});\n    }\n  };\n\n  render() {\n    console.log(\n      '--¯_(ツ)_/¯-----------this.state.zoom----------',\n      this.state.zoom,\n    );\n    return (\n      <View\n        style={{\n          width: '100%',\n          position: 'relative',\n          marginBottom: 20,\n          marginTop: 20,\n        }}>\n        <Map\n          minZoom={2}\n          ref={this.mapRef}\n          onzoomend={this.handleZoom}\n          center={[this.state.lat, this.state.lng]}\n          zoom={this.state.zoom}\n          style={{width: '100%', position: 'relative', height: 400}}>\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n            url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\n          />\n          {!!this.props.countries &&\n            this.props.countries.map((data) => {\n              const {\n                country,\n                confirmed,\n                deaths,\n                recovered,\n                population,\n                locations,\n              } = data;\n              let cords;\n              if (locations.length > 1) {\n                cords = locations.find((i) => i.state === '');\n                if (!cords) {\n                  cords = averageGeolocation(locations);\n                }\n              } else {\n                cords = locations[0];\n              }\n              const point = [cords.lat, cords.lon];\n\n              let confirmedWidth = (\n                (confirmed / 100 / 2 / 10) *\n                (this.state.zoom * 2)\n              ).toFixed(2);\n\n              confirmedWidth = confirmedWidth > 40 ? confirmedWidth : 40;\n              let recoveredWidth = ((recovered / confirmed) * 100).toFixed(2);\n              let deathsWidth = ((deaths / confirmed) * 100).toFixed(2);\n\n              if (this.state.zoom < 5) {\n                confirmedWidth =\n                  confirmedWidth < ZOOM_4 ? confirmedWidth : ZOOM_4;\n              } else {\n                confirmedWidth =\n                  confirmedWidth < ZOOM_5 ? confirmedWidth : ZOOM_5;\n              }\n              //   recoveredWidth = recoveredWidth < 1000 ? recoveredWidth : 1000;\n              //   deathsWidth = deathsWidth < 900 ? deathsWidth : 900;\n              const outerCircle = {\n                backgroundColor: RED,\n                color: RED,\n                width: `${confirmedWidth}%`,\n                height: `${confirmedWidth}%`,\n                borderRadius: 100,\n                textAlign: 'center',\n                marginLeft: `-${confirmedWidth / 2}%`,\n                marginTop: `-${confirmedWidth / 2}%`,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                position: 'relative',\n              };\n              const recoveredCircle = {\n                zIndex: 600,\n                backgroundColor: GREEN,\n                color: GREEN,\n                width: `${recoveredWidth}%`,\n                height: `${recoveredWidth}%`,\n                borderRadius: 100,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                margin: '0 auto',\n              };\n              const deathCircle = {\n                zIndex: 601,\n                position: 'absolute',\n                backgroundColor: GREY,\n                color: GREY,\n                display: 'flex',\n                width: `${deathsWidth}%`,\n                height: `${deathsWidth}%`,\n                borderRadius: 100,\n                margin: '0 auto',\n              };\n              const iconMarkup = renderToStaticMarkup(\n                <div style={outerCircle}>\n                  <div style={recoveredCircle}></div>\n                  <div style={deathCircle}></div>\n                </div>,\n              );\n              const customMarkerIcon = divIcon({\n                html: iconMarkup,\n              });\n              return (\n                <Marker position={point} key={country} icon={customMarkerIcon}>\n                  <Popup>\n                    <span>\n                      <b>{country}</b>\n                    </span>\n                    <br />\n                    <span>\n                      <span\n                        style={{\n                          backgroundColor: RED,\n                          marginTop: -5,\n                          width: 5,\n                          height: 5,\n                          borderRadius: 100,\n                          display: 'inline-block',\n                        }}>\n                        {' '}\n                      </span>{' '}\n                      Cases: {numberWithCommas(confirmed)}\n                    </span>\n                    <br />\n                    <span>\n                      <span\n                        style={{\n                          backgroundColor: GREEN,\n                          marginTop: -5,\n                          width: 5,\n                          height: 5,\n                          borderRadius: 100,\n                          display: 'inline-block',\n                        }}>\n                        {' '}\n                      </span>\n                      Recovered: {numberWithCommas(recovered)}\n                    </span>\n                    <br />\n                    <span>\n                      <span\n                        style={{\n                          backgroundColor: GREY,\n                          marginTop: -5,\n                          width: 5,\n                          height: 5,\n                          borderRadius: 100,\n                          display: 'inline-block',\n                        }}>\n                        {' '}\n                      </span>\n                      Deaths: {numberWithCommas(deaths)}\n                    </span>\n                    <br />\n                    {population && (\n                      <span>Population: {numberWithCommas(population)}</span>\n                    )}\n                  </Popup>\n                </Marker>\n              );\n            })}\n        </Map>\n      </View>\n    );\n  }\n}\nexport default subscribe(Mapx, state, (state) => ({\n  countries: state.countries,\n}));\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\n\nconst labelStyle = {\n  color: '#fff',\n  alignSelf: 'center',\n  marginTop: 10,\n  marginBottom: 10,\n};\nconst DropDown = ({onSelect, label, options}) => {\n  return (\n    <View className=\"select\">\n      <label style={labelStyle}>{label}:</label>\n      <select\n        onChange={(e) => {\n          onSelect(e.currentTarget.value);\n        }}>\n        {Object.keys(options).map((i) => {\n          return (\n            <option key={`dropdownItem_${i}`} value={i}>\n              {i}\n            </option>\n          );\n        })}\n      </select>\n    </View>\n  );\n};\nexport default memo(DropDown);\n","const moment = require('moment');\nconst request = require('request');\nconst csv = require('csvtojson');\n\nexport const d = {};\n\nclass Covid19 {\n  async getData(date) {\n    let data = {};\n    if (date != undefined) {\n      date = moment(date, 'MM-DD-YYYY').format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    } else {\n      date = moment().format('MM-DD-YYYY');\n      data = await this.fetchData(date);\n    }\n    return data;\n  }\n\n  async getTimeSeriesData(type) {\n    var data = {};\n    let date = moment().format('MM-DD-YYYY');\n    type = type.toLowerCase();\n    data = d[type];\n    if (data === undefined || (data && data.lastUpdated !== date)) {\n      await this.addRemoteTimesSeries(type);\n      data = d[type];\n    }\n    return data;\n  }\n\n  async fetchData(date) {\n    var data = {};\n    //console.log(`Fetching data from: ${date}`)\n    data = d[date];\n    while (\n      data === undefined &&\n      moment(date, 'MM-DD-YYYY') >= moment('01-22-2020', 'MM-DD-YYYY')\n    ) {\n      //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from ${date}`)\n      await this.addRemoteDailyReports(date);\n      data = d[date];\n      if (data == undefined) {\n        //console.log(`REMOTE data from ${date} not found...attempting to fetch LOCAL data from one day before.`)\n        date = moment(date, 'MM-DD-YYYY')\n          .subtract(1, 'days')\n          .format('MM-DD-YYYY');\n        data = d[date];\n        if (data === undefined) {\n          //console.log(`LOCAL data from ${date} not found...attempting to fetch REMOTE data from one day before.`)\n          await this.addRemoteDailyReports(date);\n          data = d[date];\n        }\n      }\n    }\n    if (data === undefined) {\n      data = {error: 'Data not found. Plase try again.'};\n    }\n    return data;\n  }\n\n  async addRemoteDailyReports(date) {\n    let locations = [];\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var obj = {};\n          if (\n            moment(date, 'MM-DD-YYYY') <= moment('03-22-2020', 'MM-DD-YYYY')\n          ) {\n            obj = {\n              country: json['Country/Region'] || '',\n              state: json['Province/State'] || '',\n              lat: json['Latitude'] || '0.0',\n              lon: json['Longitude'] || '0.0',\n              lastUpdate: json['Last Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          } else {\n            // console.log('after 03-22-2020');\n            obj = {\n              country: json['Country_Region'] || '',\n              state: json['Province_State'] || '',\n              lat: json['Lat'] || '0.0',\n              lon: json['Long_'] || '0.0',\n              lastUpdate: json['Last_Update'] || '',\n              confirmed: parseInt(json['Confirmed']) || 0,\n              deaths: parseInt(json['Deaths']) || 0,\n              recovered: parseInt(json['Recovered']) || 0,\n            };\n          }\n          locations.push(obj);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (locations.length > 0) {\n          let countries = await this.groupBy('country', locations, date);\n          delete d[date];\n          d[date] = countries;\n        }\n      });\n  }\n\n  async groupBy(key, array, date) {\n    var json = {};\n    var result = [];\n    var totalConfirmed = 0;\n    var totalRecovered = 0;\n    var totalDeaths = 0;\n\n    var allConfirmed = 0;\n    var allRecovered = 0;\n    var allDeaths = 0;\n\n    json.countries = result;\n\n    for (var i = 0; i < array.length; i++) {\n      var added = false;\n      totalConfirmed = 0;\n      totalRecovered = 0;\n      totalDeaths = 0;\n\n      allConfirmed += parseInt(array[i].confirmed);\n      allRecovered += parseInt(array[i].recovered);\n      allDeaths += parseInt(array[i].deaths);\n\n      // adds the reset of the locations for the country\n      for (var j = 0; j < result.length; j++) {\n        if (result[j][key] == array[i][key]) {\n          totalConfirmed += parseInt(array[i].confirmed);\n          result[j].confirmed = totalConfirmed + parseInt(result[j].confirmed);\n\n          totalRecovered += parseInt(array[i].recovered);\n          result[j].recovered = totalRecovered + parseInt(result[j].recovered);\n\n          totalDeaths += parseInt(array[i].deaths);\n          result[j].deaths = totalDeaths + parseInt(result[j].deaths);\n\n          result[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        totalConfirmed = 0;\n        totalRecovered = 0;\n        totalDeaths = 0;\n        var entry = {locations: []};\n\n        totalConfirmed += parseInt(array[i].confirmed);\n        entry['confirmed'] = totalConfirmed;\n\n        totalRecovered += parseInt(array[i].recovered);\n        entry['recovered'] = totalRecovered;\n\n        totalDeaths += parseInt(array[i].deaths);\n        entry['deaths'] = totalDeaths;\n\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n\n        entry.locations.push(array[i]);\n        result.push(entry);\n      }\n    }\n\n    json.date = date;\n    json.confirmed = allConfirmed;\n    json.recovered = allRecovered;\n    json.deaths = allDeaths;\n\n    return json;\n  }\n\n  async addRemoteTimesSeries(type) {\n    var countries = [];\n    let min = moment('2020-03-11');\n    let max = moment();\n    //let initCapType = type.charAt(0).toUpperCase() + type.slice(1)\n    await csv()\n      .fromStream(\n        request.get(\n          `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${type}_global.csv`,\n        ),\n      )\n      .subscribe(async (json) => {\n        return new Promise((resolve, reject) => {\n          var location = {\n            country: json['Country/Region'] || '',\n            state: json['Province/State'] || '',\n            lat: json['Lat'] || '0.0',\n            lon: json['Long'] || '0.0',\n          };\n          let dates = [];\n          for (\n            var m = moment(min);\n            m.diff(max, 'days') <= 0;\n            m.add(1, 'days')\n          ) {\n            let date = m.format('M/D/YY');\n            if (json[date] != undefined) {\n              let value = parseInt(json[date]) || 0;\n              let dateObj = {\n                [m.format('MM-DD-YYYY')]: value,\n              };\n              dates.push(dateObj);\n            }\n          }\n\n          if (dates.length > 0) {\n            let lastDate = dates[dates.length - 1];\n            location.total = Object.values(lastDate)[0];\n          }\n\n          location.dates = dates;\n          countries.push(location);\n          resolve();\n        });\n      })\n      .then(async (json) => {\n        if (countries.length > 0) {\n          countries = await this.groupByTimesSeries('country', countries);\n\n          delete d[type];\n          d[type] = countries;\n        }\n      });\n  }\n\n  async groupByTimesSeries(key, array) {\n    let root = {};\n    var locations = [];\n    var grandTotal = 0;\n\n    root.countries = locations;\n\n    for (var i = 0; i < array.length; i++) {\n      var total = 0;\n      var added = false;\n      // adds the reset of the locations for the country\n      for (var j = 0; j < locations.length; j++) {\n        if (locations[j][key] == array[i][key]) {\n          total += parseInt(array[i].total) || 0;\n          locations[j].locations.push(array[i]);\n          added = true;\n          break;\n        }\n      }\n      // adds the first location for the country\n      if (!added) {\n        var entry = {locations: []};\n        entry[key] = array[i][key];\n        entry['lat'] = array[i]['lat'];\n        entry['lon'] = array[i]['lon'];\n        total += parseInt(array[i]['total']) || 0;\n        entry.locations.push(array[i]);\n        locations.push(entry);\n      }\n\n      locations[j].total = total;\n      grandTotal += total;\n    }\n\n    root.lastUpdated = moment().format('MM-DD-YYYY');\n    root.total = grandTotal;\n    return root;\n  }\n}\n\nmodule.exports = Covid19;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {memo} from 'react';\nimport {Text, View} from 'react-native';\n\nexport const chartList = {\n  Cases: 'confirmed',\n  'Active cases': 'active',\n  Recovered: 'recovered',\n  Deaths: 'deaths',\n  'Population infected': 'precentage',\n};\n\nexport const generateBarData = (countries, sort = 'confirmed') => {\n  const top10 = countries.sort((a, b) => b[sort] - a[sort]).slice(0, 9);\n\n  const labels = top10.map((i) => i.country);\n  const data = top10.map((i) => i[sort]);\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Cases per country',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data,\n      },\n    ],\n  };\n\n  return chartData;\n};\n\nexport const format = (i) => (i < 10 ? `0${i}` : i);\nexport const colors = [\n  '#ff0029',\n  '#377eb8',\n  '#7f80cd',\n  '#66a61e',\n  '#984ea3',\n  '#00d2d5',\n  '#ff7f00',\n  '#af8d00',\n  '#b3e900',\n  '#fec254',\n  '#ccebc5',\n  '#a63603',\n  '#016c59',\n  '#e7298a',\n  '#c994c7',\n  '#dfdf00',\n  '#df00df',\n  '#80ff80',\n];\n\nexport const Box = memo(({children, style}) => (\n  <View\n    style={[\n      {\n        margin: 10,\n        padding: 10,\n        width: '80%',\n      },\n      style,\n    ]}>\n    {children}\n  </View>\n));\n\nexport const L = memo(({t}) => (\n  <Text\n    style={{\n      color: '#ddd',\n    }}>\n    {t}\n  </Text>\n));\nexport const V = memo(({t}) => (\n  <Text\n    style={{\n      color: '#fff',\n    }}>\n    {t}\n  </Text>\n));\n\nexport function numberWithCommas(x, shouldRound) {\n  const s = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  if (shouldRound && x > 999) {\n    let decimal = '';\n    if (x < 2000 && s.length > 4 && s.slice(-3) !== '000') {\n      decimal = `.${s.slice(-3)[0]}`;\n    }\n\n    return `${s.slice(0, s.length - 4)}${decimal}K`;\n  }\n  return s;\n}\n","import {createState} from 'jstates-react';\n\nconst state = createState({\n  lastUpdated: null,\n  search: '',\n});\n\nexport default state;\n"],"sourceRoot":""}