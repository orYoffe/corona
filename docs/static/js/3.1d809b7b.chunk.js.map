{"version":3,"sources":["Country.js"],"names":["styles","StyleSheet","create","container","backgroundColor","alignItems","minHeight","width","title","color","fontWeight","fontSize","text","marginBottom","country","borderBottomColor","borderBottomStyle","borderBottomWidth","useParams","useState","barData","setBarData","dailyInfections","setDailyInfections","timeData","setTimeData","data","setCountryData","useEffect","state","countries","countryTimeData","time","find","i","countryData","confirmed","recovered","deaths","labels","datasets","label","borderColor","borderWidth","sets","locations","dates","map","index","total","Object","keys","forEach","location","y","x","d","Date","replace","day","getDate","month","getMonth","format","lineChartData","daily","parseInt","dailyInfectionsData","slice","ActivityIndicator","size","style","marginTop","alignSelf","View","Text","Box","key","L","t","V","numberWithCommas","lastUpdated","toDateString","LineChart","BarChart","colors"],"mappings":"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","file":"static/js/3.1d809b7b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {StyleSheet, Text, View, ActivityIndicator} from 'react-native';\nimport {useParams} from 'react-router-dom';\nimport {\n  LineChart,\n  BarChart,\n  format,\n  numberWithCommas,\n  Box,\n  L,\n  V,\n} from './Chart';\nimport state from './state';\n\nconst Country = () => {\n  let {country} = useParams();\n  const [barData, setBarData] = useState(null);\n  const [dailyInfections, setDailyInfections] = useState(null);\n  const [timeData, setTimeData] = useState(null);\n  const [data, setCountryData] = useState(null);\n\n  useEffect(() => {\n    const {countries, time} = state.state;\n    const countryTimeData = time.countries.find((i) => i.country === country);\n    const countryData = countries.find((i) => i.country === country);\n    if (!countryData) {\n      setCountryData(0);\n    } else {\n      setCountryData(countryData);\n      const {confirmed, recovered, deaths} = countryData;\n      const barChartData = {\n        labels: ['Total', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: country,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: [confirmed, recovered, deaths],\n          },\n        ],\n      };\n      setBarData(barChartData);\n    }\n    if (!countryTimeData) {\n      setTimeData(0);\n    } else {\n      const sets = countryTimeData.locations[0].dates.map((i, index) => {\n        let total = 0;\n        const time = Object.keys(i)[0];\n        countryTimeData.locations.forEach((location) => {\n          total += location.dates[index][time];\n        });\n        return {y: time, x: total};\n      });\n      const labels = sets.map((i) => {\n        const d = new Date(i.y.replace(/-/g, '/'));\n        const day = d.getDate();\n        const month = d.getMonth() + 1;\n\n        return `${format(day)}.${format(month)}`;\n      });\n      const lineChartData = {\n        labels,\n        datasets: [\n          {\n            label: 'Confirmed Cases',\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderWidth: 2,\n            data: sets.map((i) => i.x),\n          },\n        ],\n      };\n      setTimeData(lineChartData);\n      const daily = sets.map(\n        (i, index) =>\n          parseInt(i.x) - parseInt((sets[index - 1] && sets[index - 1].x) || 0),\n      );\n      const dailyInfectionsData = {\n        labels: labels.slice(1),\n        datasets: [\n          {\n            label: 'Daily Cases',\n            backgroundColor: '#d45757',\n            borderWidth: 2,\n            data: daily.slice(1),\n          },\n        ],\n      };\n      setDailyInfections(dailyInfectionsData);\n    }\n  }, [country]);\n\n  if (data === null) {\n    return (\n      <ActivityIndicator\n        size=\"large\"\n        style={{\n          marginTop: 40,\n          alignSelf: 'center',\n        }}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {data === 0 ? (\n        <Text style={[styles.title, styles.text]}>\n          No country by the name {country} was found\n        </Text>\n      ) : (\n        <>\n          <Box\n            style={{\n              borderBottomColor: '#fff',\n              borderBottomStyle: 'solid',\n              borderBottomWidth: 1,\n            }}>\n            <Text style={[styles.title, styles.text]}>{country}</Text>\n            <Text key={`Total cases: ${data.confirmed}`} style={styles.text}>\n              <L t=\"Total cases: \" />\n              <V t={numberWithCommas(data.confirmed)} />\n            </Text>\n            <Text key={`Total deaths: ${data.deaths}`} style={styles.text}>\n              <L t=\"Total deaths: \" />\n              <V t={numberWithCommas(data.deaths)} />\n            </Text>\n            <Text\n              key={`Total recovered: ${data.recovered}`}\n              style={styles.text}>\n              <L t=\"Total recovered: \" />\n              <V t={numberWithCommas(data.recovered)} />\n            </Text>\n            <Text\n              key={`updated on: ${state.state.lastUpdated.toDateString()}`}\n              style={styles.text}>\n              <L t=\"Updated on: \" />\n              <V t={state.state.lastUpdated.toDateString()} />\n            </Text>\n          </Box>\n          {!!timeData && (\n            <View style={{width: '80%', marginBottom: 20}}>\n              <LineChart data={timeData} title />\n              {dailyInfections && <LineChart data={dailyInfections} title />}\n              <BarChart\n                data={barData}\n                colors={['#ff2222', '#00ff00', '#ccc']}\n              />\n            </View>\n          )}\n        </>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    minHeight: '100%',\n    width: '100%',\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n    marginBottom: 5,\n  },\n  country: {\n    width: '100%',\n    marginBottom: 10,\n    borderBottomColor: '#fff',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: 1,\n  },\n});\n\nexport default Country;\n"],"sourceRoot":""}